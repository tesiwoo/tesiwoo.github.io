import{_ as s,c as a,a as n,o as e}from"./app-lHsGSIJU.js";const t={};function l(h,i){return e(),a("div",null,i[0]||(i[0]=[n(`<div class="hint-container tip"><p class="hint-container-title">问题</p><p>什么是闭包？<br> 闭包有什么用途？</p></div><hr><p><strong>闭包是指一个函数能够记住并访问它的词法作用域，即使这个函数在其词法作用域之外被调用。</strong></p><h3 id="什么是闭包" tabindex="-1"><a class="header-anchor" href="#什么是闭包"><span>什么是闭包？</span></a></h3><p>闭包是 <code>JavaScript</code> 中的一个重要概念，它发生在当一个函数嵌套在另一个函数内部时，内部函数可以访问外部函数的变量和参数，即使外部函数已经执行完毕并返回。</p><p>简单来说，闭包就是“函数 + 函数声明时的词法作用域”组合形成的一个整体。</p><hr><h3 id="闭包的特性" tabindex="-1"><a class="header-anchor" href="#闭包的特性"><span>闭包的特性</span></a></h3><ul><li>内部函数可以访问外部函数的变量。</li><li>外部函数执行完成后，其作用域不会立即销毁，而是被闭包保留。</li><li>闭包可以让变量的生命周期延长，直到不再有任何引用为止。</li></ul><hr><h3 id="闭包的作用" tabindex="-1"><a class="header-anchor" href="#闭包的作用"><span>闭包的作用</span></a></h3><ul><li><strong>数据封装与信息隐藏</strong>：通过闭包可以创建私有变量，避免全局污染。</li><li><strong>回调函数和事件处理</strong>：在异步编程中，闭包常用于保存状态。</li><li><strong>工厂函数</strong>：通过闭包返回特定功能的对象。</li></ul><h3 id="示例代码" tabindex="-1"><a class="header-anchor" href="#示例代码"><span>示例代码</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> outerFunction</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    let</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> outerVariable</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">I&#39;m outside!</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> innerFunction</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">outerVariable</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 访问外部函数的变量</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> innerFunction</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> closure</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> outerFunction</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">closure</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 输出: I&#39;m outside!</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>innerFunction</code> 是一个闭包，它记住了 <code>outerFunction</code> 的作用域，并能够在 <code>outerFunction</code> 执行完毕后继续访问 <code>outerVariable</code>。</p><hr><h3 id="闭包的注意事项" tabindex="-1"><a class="header-anchor" href="#闭包的注意事项"><span>闭包的注意事项</span></a></h3><ul><li><strong>内存泄漏</strong>：由于闭包会持有对外部作用域的引用，如果未正确释放，可能导致内存占用过高。</li><li><strong>性能问题</strong>：过多使用闭包可能会影响程序性能，尤其是在循环或大量嵌套的情况下。</li></ul>`,18)]))}const p=s(t,[["render",l]]),d=JSON.parse('{"path":"/web/interview/20d108zg/","title":"闭包","lang":"zh-CN","frontmatter":{"title":"闭包","createTime":"2025/02/14 21:50:02","permalink":"/web/interview/20d108zg/","description":"问题 什么是闭包？ 闭包有什么用途？ 闭包是指一个函数能够记住并访问它的词法作用域，即使这个函数在其词法作用域之外被调用。 什么是闭包？ 闭包是 JavaScript 中的一个重要概念，它发生在当一个函数嵌套在另一个函数内部时，内部函数可以访问外部函数的变量和参数，即使外部函数已经执行完毕并返回。 简单来说，闭包就是“函数 + 函数声明时的词法作用域”...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"闭包\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-14T13:25:32.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://zhenghaoyang.cn/web/interview/20d108zg/"}],["meta",{"property":"og:site_name","content":"Hoey"}],["meta",{"property":"og:title","content":"闭包"}],["meta",{"property":"og:description","content":"问题 什么是闭包？ 闭包有什么用途？ 闭包是指一个函数能够记住并访问它的词法作用域，即使这个函数在其词法作用域之外被调用。 什么是闭包？ 闭包是 JavaScript 中的一个重要概念，它发生在当一个函数嵌套在另一个函数内部时，内部函数可以访问外部函数的变量和参数，即使外部函数已经执行完毕并返回。 简单来说，闭包就是“函数 + 函数声明时的词法作用域”..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-14T13:25:32.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-14T13:25:32.000Z"}]]},"readingTime":{"minutes":1.54,"words":461},"git":{"createdTime":1739541971000,"updatedTime":1747229132000,"contributors":[{"name":"zhenghaoyang24","username":"zhenghaoyang24","email":"zhenghaoyang24@foxmail.com","commits":4,"avatar":"https://avatars.githubusercontent.com/zhenghaoyang24?v=4","url":"https://github.com/zhenghaoyang24"}]},"autoDesc":true,"filePathRelative":"notes/web/3.前端面试/3.JavaScript/5.闭包.md","headers":[]}');export{p as comp,d as data};
