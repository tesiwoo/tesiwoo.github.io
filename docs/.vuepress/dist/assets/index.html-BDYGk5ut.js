import{_ as i,c as a,a as e,o as n}from"./app-lHsGSIJU.js";const t={};function l(h,s){return n(),a("div",null,s[0]||(s[0]=[e(`<p>最近经常遇到回调函数这个概念,查看相关资料后记录一下。</p><h4 id="回调是什么" tabindex="-1"><a class="header-anchor" href="#回调是什么"><span>回调是什么?</span></a></h4><p><strong>回调(callback)</strong> 是对某段代码的引用,它被作为参数传递给另一段代码,并在某个时刻被调用。通俗点讲就是主函数中的某个参数是一个外部函数,当符合某个条件时,这个函数将会被调用.</p><h4 id="为什么要使用回调函数" tabindex="-1"><a class="header-anchor" href="#为什么要使用回调函数"><span>为什么要使用回调函数?</span></a></h4><p>使用回调可以将主函数与回调函数两者分开,主函数不需要关心被调函数叫什么、有什么用，只需要在某种条件下执行被调函数。可见函数回调可以实现松耦合，不管是主函数还是回调函数都可以进行单独维护。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">A</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">_function</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">){</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    _function</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">我是主函数</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">},</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">B</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    setTimeout</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">我是回调函数</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1000</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">},</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//执行与结果</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">A</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">B</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">/*</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  我是主函数</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  我是回调函数</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">*/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上代码先输出“我是主函数”，随后输出被调函数B的内容，因此是一种异步回调，此外还有同步回调。异步回调在js中非常常见，检测窗口变化、检测屏幕滚动等。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">window</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">addEventListener</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">scroll</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">homePageScroll</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>homePageScroll作为参数传递给了addEventListener，订阅scroll这个事件，当屏幕发生滚动则调用作为参数的指定函数，addEventListener与被调函数并没有同时发生，所以homePageScroll便是一个异步回调函数。<br> 所以，函数回调与函数直接调用都是两种不同的函数调用方式。</p>`,9)]))}const k=i(t,[["render",l]]),r=JSON.parse('{"path":"/article/22110801/","title":"回调函数理解","lang":"zh-CN","frontmatter":{"title":"回调函数理解","createTime":"2022/11/8","tags":["JavaScript"],"permalink":"/article/22110801/","description":"最近经常遇到回调函数这个概念,查看相关资料后记录一下。 回调是什么? 回调(callback) 是对某段代码的引用,它被作为参数传递给另一段代码,并在某个时刻被调用。通俗点讲就是主函数中的某个参数是一个外部函数,当符合某个条件时,这个函数将会被调用. 为什么要使用回调函数? 使用回调可以将主函数与回调函数两者分开,主函数不需要关心被调函数叫什么、有什么...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"回调函数理解\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-31T08:33:15.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://zhenghaoyang.cn/article/22110801/"}],["meta",{"property":"og:site_name","content":"Hoey"}],["meta",{"property":"og:title","content":"回调函数理解"}],["meta",{"property":"og:description","content":"最近经常遇到回调函数这个概念,查看相关资料后记录一下。 回调是什么? 回调(callback) 是对某段代码的引用,它被作为参数传递给另一段代码,并在某个时刻被调用。通俗点讲就是主函数中的某个参数是一个外部函数,当符合某个条件时,这个函数将会被调用. 为什么要使用回调函数? 使用回调可以将主函数与回调函数两者分开,主函数不需要关心被调函数叫什么、有什么..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-31T08:33:15.000Z"}],["meta",{"property":"article:tag","content":"JavaScript"}],["meta",{"property":"article:modified_time","content":"2024-10-31T08:33:15.000Z"}]]},"readingTime":{"minutes":1.38,"words":414},"git":{"createdTime":1730363595000,"updatedTime":1730363595000,"contributors":[{"name":"zhenghaoyang24","username":"zhenghaoyang24","email":"2463193508@qq.ocm","commits":1,"avatar":"https://avatars.githubusercontent.com/zhenghaoyang24?v=4","url":"https://github.com/zhenghaoyang24"}]},"autoDesc":true,"filePathRelative":"学文/22110801.md","headers":[],"categoryList":[{"id":"9c32e1","sort":10001,"name":"学文"}]}');export{k as comp,r as data};
