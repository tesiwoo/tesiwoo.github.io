import{_ as n,c as h,a,b as s,d as e,e as d,w as l,r,o as p}from"./app-lHsGSIJU.js";const k={},o={class:"hint-container tip"};function c(g,i){const t=r("RouteLink");return p(),h("div",null,[i[4]||(i[4]=a(`<h2 id="_1-初始化版本库" tabindex="-1"><a class="header-anchor" href="#_1-初始化版本库"><span>1. 初始化版本库</span></a></h2><h3 id="功能概述" tabindex="-1"><a class="header-anchor" href="#功能概述"><span>功能概述</span></a></h3><p><code>git init</code> 命令用于在本地目录中创建一个新的 Git 版本库。当你开始一个新的项目或者想要对现有的项目进行版本控制时，就可以使用该命令来初始化一个 Git 仓库。</p><h3 id="操作步骤" tabindex="-1"><a class="header-anchor" href="#操作步骤"><span>操作步骤</span></a></h3><p>首先，打开终端（在 Windows 系统中可以使用 Git Bash，在 macOS 和 Linux 系统中可以使用自带的终端应用），然后导航到你想要创建版本库的目录。例如，我们要在 <code>~/Projects/my-project</code> 目录下创建一个新的 Git 版本库，可以执行以下命令：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">cd</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ~/Projects/my-project</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> init</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>执行 <code>git init</code> 命令后，Git 会在当前目录下创建一个名为 <code>.git</code> 的<strong>隐藏目录</strong>，该目录包含了 Git 版本库的所有元数据和配置信息。</p><h3 id="查看初始化结果" tabindex="-1"><a class="header-anchor" href="#查看初始化结果"><span>查看初始化结果</span></a></h3><p>你可以使用 <code>ls -a</code> 命令查看当前目录下的所有文件和文件夹，确认 <code>.git</code> 目录是否已经创建：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">ls</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -a</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="_2-添加文件到暂存区" tabindex="-1"><a class="header-anchor" href="#_2-添加文件到暂存区"><span>2. 添加文件到暂存区</span></a></h2><h3 id="功能概述-1" tabindex="-1"><a class="header-anchor" href="#功能概述-1"><span>功能概述</span></a></h3><p>在 Git 中，文件的修改需要先添加到暂存区，然后才能提交到版本库。<code>git add</code> 命令用于将文件的修改添加到暂存区。</p><h3 id="常用用法" tabindex="-1"><a class="header-anchor" href="#常用用法"><span>常用用法</span></a></h3><ul><li><strong>添加单个文件</strong>：如果你只需要添加一个文件到暂存区，可以使用以下命令：</li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> add</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> filename.txt</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这里的 <code>filename.txt</code> 是你要添加的文件的名称。</p><ul><li><strong>添加多个文件</strong>：如果要添加多个文件，可以在 <code>git add</code> 命令后面依次列出这些文件的名称，用<strong>空格分隔</strong>：</li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> add</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> file1.txt</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> file2.txt</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><strong>添加整个目录</strong>：如果你想将某个目录下的所有文件和子目录的修改都添加到暂存区，可以使用以下命令：</li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> add</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> directory/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其中 <code>directory/</code> 是你要添加的目录的名称。</p><ul><li><strong>添加所有修改</strong>：使用 <code>.</code> 或 <code>--all</code> 选项可以将当前目录下的所有文件的修改都添加到暂存区：</li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> add</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> .</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 或者</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> add</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --all</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="查看暂存区状态" tabindex="-1"><a class="header-anchor" href="#查看暂存区状态"><span>查看暂存区状态</span></a></h3><p>使用 <code>git status</code> 命令可以查看当前工作目录和暂存区的状态，确认哪些文件已经添加到暂存区，哪些文件还未添加：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> status</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="_3-提交暂存区的修改" tabindex="-1"><a class="header-anchor" href="#_3-提交暂存区的修改"><span>3. 提交暂存区的修改</span></a></h2><h3 id="功能概述-2" tabindex="-1"><a class="header-anchor" href="#功能概述-2"><span>功能概述</span></a></h3><p><code>git commit</code> 命令用于将暂存区的修改提交到本地版本库。每次提交都会生成一个新的提交对象，该对象包含了本次提交的元数据（如作者、提交时间、提交信息等）以及指向父提交对象的引用。</p><h3 id="基本用法" tabindex="-1"><a class="header-anchor" href="#基本用法"><span>基本用法</span></a></h3><p>提交暂存区的修改时，需要使用 <code>-m</code> 选项指定提交信息，该信息用于描述本次提交所做的更改：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> commit</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -m</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Initial commit</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这里的 <code>&quot;Initial commit&quot;</code> 是提交信息，你可以根据实际情况修改该信息，使其更准确地描述本次提交的内容。</p><h3 id="详细提交信息" tabindex="-1"><a class="header-anchor" href="#详细提交信息"><span>详细提交信息</span></a></h3><p>如果提交信息比较复杂，可以不使用 <code>-m</code> 选项，直接执行 <code>git commit</code> 命令。Git 会打开一个文本编辑器（如 Vim 或 Nano），让你输入详细的提交信息。在编辑器中输入提交信息后，保存并退出编辑器，即可完成提交。</p><h3 id="跳过暂存区直接提交" tabindex="-1"><a class="header-anchor" href="#跳过暂存区直接提交"><span>跳过暂存区直接提交</span></a></h3><p>如果你只想提交某些文件的修改，并且不想将这些修改先添加到暂存区，可以使用 <code>-a</code> 选项：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> commit</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -a</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -m</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Update some files</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>使用 <code>-a</code> 选项时，Git 会自动将所有已跟踪文件的修改添加到暂存区并提交，但不会处理未跟踪的文件。</p>`,40)),s("div",o,[i[3]||(i[3]=s("p",{class:"hint-container-title"},"提示",-1)),s("p",null,[i[1]||(i[1]=e("为提高代码提交信息的可读性、协作效率和版本管理质量，你应该尽可能遵循 ")),d(t,{to:"/notes/memo/Git/%E6%8F%90%E4%BA%A4%E4%BF%A1%E6%81%AF%E8%A7%84%E8%8C%83.html"},{default:l(()=>i[0]||(i[0]=[e("commit 的提交规范")])),_:1,__:[0]}),i[2]||(i[2]=e(" 。"))])]),i[5]||(i[5]=a('<h2 id="_4-查看提交历史" tabindex="-1"><a class="header-anchor" href="#_4-查看提交历史"><span>4. 查看提交历史</span></a></h2><h3 id="功能概述-3" tabindex="-1"><a class="header-anchor" href="#功能概述-3"><span>功能概述</span></a></h3><p><code>git log</code> 命令用于查看版本库的提交历史，包括每个提交的哈希值、作者、提交时间和提交信息等。</p><h3 id="基本用法-1" tabindex="-1"><a class="header-anchor" href="#基本用法-1"><span>基本用法</span></a></h3><p>执行 <code>git log</code> 命令可以查看完整的提交历史：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> log</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>输出结果会按照时间顺序倒序排列，<strong>最新的提交在最上面</strong>。</p><h3 id="简化输出" tabindex="-1"><a class="header-anchor" href="#简化输出"><span>简化输出</span></a></h3><p>如果提交历史很长，你可能只需要查看一些关键信息，可以使用 <code>--oneline</code> 选项简化输出：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> log</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --oneline</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>该选项会将每个提交的信息压缩到一行，<strong>只显示提交的哈希值和提交信息的前几个字符</strong>。</p><h3 id="查看指定数量的提交" tabindex="-1"><a class="header-anchor" href="#查看指定数量的提交"><span>查看指定数量的提交</span></a></h3><p>使用 <code>-n</code> 选项可以指定查看的提交数量，例如查看最近的 3 个提交：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> log</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -n</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>通过以上步骤，可以使用 <code>Git</code> 完成版本库的创建，从初始化版本库到添加文件、暂存更改、提交版本，并查看提交历史。</p>',15))])}const b=n(k,[["render",c]]),u=JSON.parse('{"path":"/memo/git/yeneb1rg/","title":"创建版本库","lang":"zh-CN","frontmatter":{"title":"创建版本库","createTime":"2025/03/12 17:13:47","permalink":"/memo/git/yeneb1rg/","tags":["Git"],"description":"1. 初始化版本库 功能概述 git init 命令用于在本地目录中创建一个新的 Git 版本库。当你开始一个新的项目或者想要对现有的项目进行版本控制时，就可以使用该命令来初始化一个 Git 仓库。 操作步骤 首先，打开终端（在 Windows 系统中可以使用 Git Bash，在 macOS 和 Linux 系统中可以使用自带的终端应用），然后导航到...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"创建版本库\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-14T10:49:48.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://zhenghaoyang.cn/memo/git/yeneb1rg/"}],["meta",{"property":"og:site_name","content":"Hoey"}],["meta",{"property":"og:title","content":"创建版本库"}],["meta",{"property":"og:description","content":"1. 初始化版本库 功能概述 git init 命令用于在本地目录中创建一个新的 Git 版本库。当你开始一个新的项目或者想要对现有的项目进行版本控制时，就可以使用该命令来初始化一个 Git 仓库。 操作步骤 首先，打开终端（在 Windows 系统中可以使用 Git Bash，在 macOS 和 Linux 系统中可以使用自带的终端应用），然后导航到..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-14T10:49:48.000Z"}],["meta",{"property":"article:tag","content":"Git"}],["meta",{"property":"article:modified_time","content":"2025-05-14T10:49:48.000Z"}]]},"readingTime":{"minutes":4.18,"words":1255},"git":{"createdTime":1741771731000,"updatedTime":1747219788000,"contributors":[{"name":"zhenghaoyang24","username":"zhenghaoyang24","email":"zhenghaoyang24@foxmail.com","commits":4,"avatar":"https://avatars.githubusercontent.com/zhenghaoyang24?v=4","url":"https://github.com/zhenghaoyang24"}]},"autoDesc":true,"filePathRelative":"notes/memo/Git/2.创建版本库.md","headers":[]}');export{b as comp,u as data};
