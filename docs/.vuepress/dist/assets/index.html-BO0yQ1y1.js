import{_ as s,c as a,a as e,o as n}from"./app-lHsGSIJU.js";const t={};function l(h,i){return n(),a("div",null,i[0]||(i[0]=[e(`<h2 id="数字" tabindex="-1"><a class="header-anchor" href="#数字"><span>数字</span></a></h2><h3 id="整数类型" tabindex="-1"><a class="header-anchor" href="#整数类型"><span>整数类型</span></a></h3><p><code>Kotlin</code> 提供了一组表示数字的内置类型。 对于整数，有四种类型。</p><div class="language-kt line-numbers-mode" data-highlighter="shiki" data-ext="kt" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">val</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> one </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // Int</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">val</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> threeBillion </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 3000000000</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // Long</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">val</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> oneLong </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1L</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // Long</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">val</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> oneByte: </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">Byte</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当初始化一个没有显式指定类型的变量时，编译器会自动推断为自 <code>Int</code> 起足以表示该值的最小类型。 如果不超过 <code>Int</code> 的取值范围，那么类型是 <code>Int</code>。 如果超出了该范围，那么类型是 <code>Long</code>。</p><h3 id="浮点类型" tabindex="-1"><a class="header-anchor" href="#浮点类型"><span>浮点类型</span></a></h3><p><code>Kotlin</code> 提供了两种浮点类型 <code>Float</code> 与 <code>Double</code> 。<code>Float</code> 表达单精度， <code>Double</code> 表达双精度。</p><table><thead><tr><th>类型</th><th>大小（比特数）</th><th>有效数字比特数</th><th>指数比特数</th><th>十进制位数</th></tr></thead><tbody><tr><td>Float</td><td>32</td><td>24</td><td>8</td><td>6-7</td></tr><tr><td>Double</td><td>64</td><td>53</td><td>11</td><td>15-16</td></tr></tbody></table><p>对于以小数初始化的变量，编译器会推断为 Double 类型：</p><div class="language-kt line-numbers-mode" data-highlighter="shiki" data-ext="kt" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">val</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> pi </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 3.14</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">          // Double</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">val</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> one: </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">Double</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 初始化类型不匹配</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果将一个值显式为 <code>Float</code> 类型，需要添加 <code>f</code> 或 <code>F 后缀</code>。如果值包含了多于 7 位十进制数，那么会将其舍入：</p><div class="language-kt line-numbers-mode" data-highlighter="shiki" data-ext="kt" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">val</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> e </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2.7182818284</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">          // Double</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">val</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> eFloat </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2.7182818284f</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // Float，实际值为 2.7182817</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>可以使用下划线使数字常量更易读：</p><div class="language-kt line-numbers-mode" data-highlighter="shiki" data-ext="kt" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">val</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> oneMillion </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1_000_000</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">val</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> creditCardNumber </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1234_5678_9012_3456L</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Kotlin 中的数字没有隐式拓宽转换，因此拥有指定类型参数的函数不能调用其他类型的值。如需将数值转换为不同的类型，需使用显式转换。</p><h3 id="显式数字转换" tabindex="-1"><a class="header-anchor" href="#显式数字转换"><span>显式数字转换</span></a></h3><p>所有数字类型都支持转换为其他类型：</p><div class="language-kt line-numbers-mode" data-highlighter="shiki" data-ext="kt" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">toByte</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(): </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">Byte</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 对 Float 与 Double 禁用</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">toShort</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(): </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">Short</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">toInt</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(): </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">Int</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 省略小数部分</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">toLong</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(): </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">Long</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">toFloat</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(): </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">Float</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">toDouble</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(): </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">Double</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="布尔值" tabindex="-1"><a class="header-anchor" href="#布尔值"><span>布尔值</span></a></h2><p>Boolean 类型表示可以有 true 与 false 两个值的布尔对象。</p><p>内置运算有：</p><p>|| —— 析取（逻辑或） &amp;&amp; —— 合取（逻辑与） ! —— 否定（逻辑非）</p><h2 id="字符与字符串" tabindex="-1"><a class="header-anchor" href="#字符与字符串"><span>字符与字符串</span></a></h2><p>字符用 <code>Char</code> 类型表示。 字符字面值用单引号括起来: &#39;1&#39;。</p><div class="language-kt line-numbers-mode" data-highlighter="shiki" data-ext="kt" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">val</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> aChar: </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">Char</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> &#39;a&#39;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// a</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(aChar)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>字符串用 <code>String</code> 类型表示，可以使用索引运算符访问: string[i]。</p><div class="language-kt line-numbers-mode" data-highlighter="shiki" data-ext="kt" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">val</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> str </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> &quot;abcd&quot;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// b</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(str[</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">])</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,27)]))}const k=s(t,[["render",l]]),p=JSON.parse('{"path":"/android/kotlin/m8u5ep4t/","title":"基本类型","lang":"zh-CN","frontmatter":{"title":"基本类型","createTime":"2025/05/15 16:41:18","permalink":"/android/kotlin/m8u5ep4t/","description":"数字 整数类型 Kotlin 提供了一组表示数字的内置类型。 对于整数，有四种类型。 当初始化一个没有显式指定类型的变量时，编译器会自动推断为自 Int 起足以表示该值的最小类型。 如果不超过 Int 的取值范围，那么类型是 Int。 如果超出了该范围，那么类型是 Long。 浮点类型 Kotlin 提供了两种浮点类型 Float 与 Double 。...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"基本类型\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://zhenghaoyang.cn/android/kotlin/m8u5ep4t/"}],["meta",{"property":"og:site_name","content":"Hoey"}],["meta",{"property":"og:title","content":"基本类型"}],["meta",{"property":"og:description","content":"数字 整数类型 Kotlin 提供了一组表示数字的内置类型。 对于整数，有四种类型。 当初始化一个没有显式指定类型的变量时，编译器会自动推断为自 Int 起足以表示该值的最小类型。 如果不超过 Int 的取值范围，那么类型是 Int。 如果超出了该范围，那么类型是 Long。 浮点类型 Kotlin 提供了两种浮点类型 Float 与 Double 。..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}]]},"readingTime":{"minutes":1.78,"words":533},"git":{},"autoDesc":true,"filePathRelative":"notes/android/kotlin/基本类型.md","headers":[]}');export{k as comp,p as data};
