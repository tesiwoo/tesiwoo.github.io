import{_ as t,c as h,a as e,b as d,d as s,e as n,w as r,r as l,o as k}from"./app-lHsGSIJU.js";const c={};function p(g,i){const a=l("RouteLink");return k(),h("div",null,[i[3]||(i[3]=e(`<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>在软件开发过程中，版本控制是至关重要的一环。Git 作为目前最流行的分布式版本控制系统，为开发者提供了强大而灵活的分支管理功能。通过使用 Git 分支，团队成员可以并行开发不同的功能，同时保持代码库的整洁和可维护性。本文将全面总结 Git 分支的相关知识，包括底层原理、常用用法和命令。</p><h2 id="_1-原理" tabindex="-1"><a class="header-anchor" href="#_1-原理"><span>1. 原理</span></a></h2><h3 id="什么是-git-分支" tabindex="-1"><a class="header-anchor" href="#什么是-git-分支"><span>什么是 Git 分支</span></a></h3><p>在 Git 中，分支本质上是一个指向某个提交对象的可变指针。每次提交时，Git 会创建一个新的提交对象，该对象包含了本次提交的元数据（如作者、提交时间、提交信息等）以及指向父提交对象的引用。而分支就是一个指向这些提交对象的指针，它可以随着新的提交而移动。</p><h3 id="分支的创建与移动" tabindex="-1"><a class="header-anchor" href="#分支的创建与移动"><span>分支的创建与移动</span></a></h3><p>当我们初始化一个 Git 仓库时，默认会有一个名为 <code>master</code>（现在很多默认是 <code>main</code>）的分支。这个分支的指针指向仓库中的第一个提交对象。当我们创建一个新的分支时，Git 会创建一个新的指针，该指针指向当前分支所指向的提交对象。例如，使用以下命令创建一个名为 <code>new-feature</code> 的分支：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> branch</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> new-feature</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>此时，<code>new-feature</code> 分支和当前分支（假设为 <code>main</code>）指向同一个提交对象。当我们切换到 <code>new-feature</code> 分支并进行新的提交时，<code>new-feature</code> 分支的指针会向前移动，而 <code>main</code> 分支的指针保持不变。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> checkout</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> new-feature</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 进行一些代码修改</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> add</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> .</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> commit</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -m</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Add new feature</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="分支的合并" tabindex="-1"><a class="header-anchor" href="#分支的合并"><span>分支的合并</span></a></h3><p>当我们在某个分支上完成了开发任务后，通常需要将该分支的修改合并到主分支或其他目标分支上。Git 提供了多种合并方式，最常见的是快进合并（Fast-forward）和三方合并（Three-way merge）。</p><ul><li><strong>快进合并</strong>：如果目标分支在创建新分支后没有进行新的提交，那么在合并时，Git 会直接将目标分支的指针向前移动到新分支的位置，这种合并方式称为快进合并。</li><li><strong>三方合并</strong>：如果目标分支在创建新分支后也有了新的提交，那么 Git 会使用三方合并算法。该算法会找到两个分支的共同祖先提交对象，然后将两个分支的修改合并到一起，生成一个新的合并提交对象。</li></ul><h2 id="_2-常用用法" tabindex="-1"><a class="header-anchor" href="#_2-常用用法"><span>2. 常用用法</span></a></h2><h3 id="创建分支" tabindex="-1"><a class="header-anchor" href="#创建分支"><span>创建分支</span></a></h3><p>创建新分支的命令非常简单，使用 <code>git branch</code> 命令即可：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> branch</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> new-feature</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果想要在创建分支的同时切换到该分支，可以使用 <code>git checkout -b</code> 命令：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> checkout</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -b</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> new-feature</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="切换分支" tabindex="-1"><a class="header-anchor" href="#切换分支"><span>切换分支</span></a></h3><p>使用 <code>git checkout</code> 命令可以切换到已有的分支：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> checkout</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> main</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>从 Git 2.23 版本开始，也可以使用 <code>git switch</code> 命令来切换分支，它的语法更加直观：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> switch</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> new-feature</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,24)),d("p",null,[i[1]||(i[1]=s("查看 ")),n(a,{to:"/notes/memo/Git/switch%E4%B8%8Echeckout.html"},{default:r(()=>i[0]||(i[0]=[s("checkout 与 switch 的一些区别")])),_:1,__:[0]}),i[2]||(i[2]=s("。"))]),i[4]||(i[4]=e(`<h3 id="查看分支" tabindex="-1"><a class="header-anchor" href="#查看分支"><span>查看分支</span></a></h3><p>使用 <code>git branch</code> 命令可以查看本地仓库中的所有分支：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> branch</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果想要查看远程仓库的分支信息，可以使用 <code>git branch -r</code> 命令：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> branch</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -r</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>使用 <code>git branch -a</code> 命令可以同时查看本地和远程仓库的分支信息：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> branch</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -a</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="合并分支" tabindex="-1"><a class="header-anchor" href="#合并分支"><span>合并分支</span></a></h3><p>将一个分支的修改合并到当前分支可以使用 <code>git merge</code> 命令。例如，将 <code>new-feature</code> 分支合并到 <code>main</code> 分支：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> checkout</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> main</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> merge</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> new-feature</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果合并过程中出现冲突，需要手动解决冲突后再进行提交。</p><h3 id="删除分支" tabindex="-1"><a class="header-anchor" href="#删除分支"><span>删除分支</span></a></h3><p>当一个分支的开发任务完成并合并到主分支后，可以使用 <code>git branch -d</code> 命令删除该分支：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> branch</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -d</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> new-feature</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果分支上的修改还没有合并到主分支，使用 <code>-d</code> 选项会提示删除失败。此时可以使用 <code>-D</code> 选项强制删除分支：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> branch</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -D</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> new-feature</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="同步远程分支" tabindex="-1"><a class="header-anchor" href="#同步远程分支"><span>同步远程分支</span></a></h3><p>若远程仓库拥有一个新分支，可以使用 <code>git fetch</code> 命令同步到本地。</p><p>首先获取远程所有分支：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> fetch</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>查看所有远程分支，找到需要的远程分支，例如 origin/dev：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> branch</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -r</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在本地新建一个同名分支，然后系统会自动与该远程分支关联：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> checkout</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> dev</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="_3-常用命令总结" tabindex="-1"><a class="header-anchor" href="#_3-常用命令总结"><span>3. 常用命令总结</span></a></h2><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>git branch</code></td><td>查看本地分支</td></tr><tr><td><code>git branch -r</code></td><td>查看远程分支</td></tr><tr><td><code>git branch -a</code></td><td>查看本地和远程分支</td></tr><tr><td><code>git branch &lt;branch-name&gt;</code></td><td>创建新分支</td></tr><tr><td><code>git checkout &lt;branch-name&gt;</code></td><td>切换到指定分支</td></tr><tr><td><code>git checkout -b &lt;branch-name&gt;</code></td><td>创建并切换到新分支</td></tr><tr><td><code>git switch &lt;branch-name&gt;</code></td><td>切换到指定分支（Git 2.23+）</td></tr><tr><td><code>git switch -c &lt;branch-name&gt;</code></td><td>创建并切换到新分支（Git 2.23+）</td></tr><tr><td><code>git merge &lt;branch-name&gt;</code></td><td>将指定分支合并到当前分支</td></tr><tr><td><code>git branch -d &lt;branch-name&gt;</code></td><td>删除已合并的分支</td></tr><tr><td><code>git branch -D &lt;branch-name&gt;</code></td><td>强制删除未合并的分支</td></tr></tbody></table>`,26))])}const b=t(c,[["render",p]]),m=JSON.parse('{"path":"/memo/git/5qv6xbvm/","title":"分支管理","lang":"zh-CN","frontmatter":{"title":"分支管理","createTime":"2025/03/12 17:25:33","permalink":"/memo/git/5qv6xbvm/","tags":["Git"],"description":"概述 在软件开发过程中，版本控制是至关重要的一环。Git 作为目前最流行的分布式版本控制系统，为开发者提供了强大而灵活的分支管理功能。通过使用 Git 分支，团队成员可以并行开发不同的功能，同时保持代码库的整洁和可维护性。本文将全面总结 Git 分支的相关知识，包括底层原理、常用用法和命令。 1. 原理 什么是 Git 分支 在 Git 中，分支本质上...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"分支管理\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-14T10:49:48.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://zhenghaoyang.cn/memo/git/5qv6xbvm/"}],["meta",{"property":"og:site_name","content":"Hoey"}],["meta",{"property":"og:title","content":"分支管理"}],["meta",{"property":"og:description","content":"概述 在软件开发过程中，版本控制是至关重要的一环。Git 作为目前最流行的分布式版本控制系统，为开发者提供了强大而灵活的分支管理功能。通过使用 Git 分支，团队成员可以并行开发不同的功能，同时保持代码库的整洁和可维护性。本文将全面总结 Git 分支的相关知识，包括底层原理、常用用法和命令。 1. 原理 什么是 Git 分支 在 Git 中，分支本质上..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-14T10:49:48.000Z"}],["meta",{"property":"article:tag","content":"Git"}],["meta",{"property":"article:modified_time","content":"2025-05-14T10:49:48.000Z"}]]},"readingTime":{"minutes":4.41,"words":1324},"git":{"createdTime":1741771731000,"updatedTime":1747219788000,"contributors":[{"name":"zhenghaoyang24","username":"zhenghaoyang24","email":"zhenghaoyang24@foxmail.com","commits":6,"avatar":"https://avatars.githubusercontent.com/zhenghaoyang24?v=4","url":"https://github.com/zhenghaoyang24"}]},"autoDesc":true,"filePathRelative":"notes/memo/Git/3.分支管理.md","headers":[]}');export{b as comp,m as data};
