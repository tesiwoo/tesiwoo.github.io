import{_ as e,c as a,a as i,o as r}from"./app-DScUAMv8.js";const o={};function s(n,t){return r(),a("div",null,t[0]||(t[0]=[i('<p>分布式系统使用消息队列的三大需求： 消息的有序性、重复消息的处理、消息可靠性保证。 对应三个要求即： 消息数据的有序存取、消息数据具有全局唯一标识、消息数据在消费完后被删除/可恢复</p><h2 id="基于list类型的消息队列" tabindex="-1"><a class="header-anchor" href="#基于list类型的消息队列"><span>基于List类型的消息队列</span></a></h2><p>List类型是一个天然的有序的数据类型，它有着FIFO的特性。 这句解决了消息的有序性一大需求。</p><p>对于重复消息的处理，可以人为的给消息加上一个唯一标识，消费者通过保存这个唯一标识并且判断是否处理过消息来保证重复消息的处理。</p><p>对于消息可靠的保证，Redis提供了BRPOPLPUSH 操作，即从List中读取数据的同时，会这个消息插入到另一个list中来作为消息备份。</p><p>消费端可以使用BRPOP命令，这个命令相比于RPOP命令来说，它是阻塞式的读取消息，当List中没数据的时候，它会在读取出等待消息的写入并读取，这大大的节省了消费者的CPU压力。</p><p><strong>存在问题：</strong> 如果消费端处理消息的速度慢生产者生产消息的速度，消息会在List中积压，从而给Redis造成存储压力。</p><h2 id="基于stream类型的消息队列" tabindex="-1"><a class="header-anchor" href="#基于stream类型的消息队列"><span>基于Stream类型的消息队列</span></a></h2>',8)]))}const d=e(o,[["render",s]]),c=JSON.parse('{"path":"/db/redisMq/","title":"基于Redis的mq","lang":"zh-CN","frontmatter":{"title":"基于Redis的mq","createTime":"2025/07/04 18:05:53","permalink":"/db/redisMq/","tag":["Redis"],"description":"分布式系统使用消息队列的三大需求： 消息的有序性、重复消息的处理、消息可靠性保证。 对应三个要求即： 消息数据的有序存取、消息数据具有全局唯一标识、消息数据在消费完后被删除/可恢复 基于List类型的消息队列 List类型是一个天然的有序的数据类型，它有着FIFO的特性。 这句解决了消息的有序性一大需求。 对于重复消息的处理，可以人为的给消息加上一个唯...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"基于Redis的mq\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-07T02:54:17.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://tesiwoo.top/db/redisMq/"}],["meta",{"property":"og:title","content":"基于Redis的mq"}],["meta",{"property":"og:description","content":"分布式系统使用消息队列的三大需求： 消息的有序性、重复消息的处理、消息可靠性保证。 对应三个要求即： 消息数据的有序存取、消息数据具有全局唯一标识、消息数据在消费完后被删除/可恢复 基于List类型的消息队列 List类型是一个天然的有序的数据类型，它有着FIFO的特性。 这句解决了消息的有序性一大需求。 对于重复消息的处理，可以人为的给消息加上一个唯..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-07T02:54:17.000Z"}],["meta",{"property":"article:tag","content":"Redis"}],["meta",{"property":"article:modified_time","content":"2025-07-07T02:54:17.000Z"}]]},"readingTime":{"minutes":1.28,"words":383},"git":{"createdTime":1751623883000,"updatedTime":1751856857000,"contributors":[{"name":"yuxiang_chu","username":"","email":"yuxiang_chu@sui.com","commits":2,"avatar":"https://gravatar.com/avatar/4ac399a125e46d0ec8629ca6750dfd462f6865f74d1d4865199efd5f4640012f?d=retro"},{"name":"TeSiWoo","username":"TeSiWoo","email":"1666016977@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/TeSiWoo?v=4","url":"https://github.com/TeSiWoo"}]},"autoDesc":true,"filePathRelative":"notes/数据库/redis/12.Redis实现中间件.md","headers":[]}');export{d as comp,c as data};
