import{_ as e,c as t,a,o as i}from"./app-DScUAMv8.js";const r={};function o(s,l){return i(),t("div",null,l[0]||(l[0]=[a('<p>1、自我介绍</p><p>2、项目介绍</p><ul><li>95值示例（简历里写了有关95值轻微洁癖）</li></ul><p>3、ElasticSeach相关</p><ul><li>排序机制-打分</li><li>分词策略</li><li>倒排索引</li></ul><p>4、MySQL相关</p><ul><li><p>慢查询如何优化</p></li><li><p>MySQL5.7所有索引类型</p></li><li><p>数据太多的分库分表</p><ul><li>垂直分表和水平分表的介绍和区别</li><li>分表维度（hash取余、步长、业务区分）</li><li>给业务带来的影响</li></ul></li></ul><p>5、是否处理过内存溢出或相关问题</p><p>6、是否使用过docker和k8s</p><ul><li>docker和传统虚拟机相比有什么优势</li><li>docker文件的介绍</li></ul><p>7、场景题</p><ul><li>五台机器定时任务，如何让它每次执行只会有一台执行到该任务</li></ul><p>8、习惯的开发流程</p><p>9、非技术问题</p><ul><li>是否做过技术分享</li><li>是否有习惯写博客</li></ul><p>10、你有什么想问的</p><h1 id="二面-组长面" tabindex="-1"><a class="header-anchor" href="#二面-组长面"><span>二面：组长面</span></a></h1><p>1、自我介绍（不要只介绍自己的项目经历，兴趣爱好也介绍一下）</p><p>2、介绍一下最近参与的项目，在其中遇到的困难以及解决方式，自身最大的收获</p><p>3、简历中介绍了带领团队拿到了整个研发组代码质量的第一名，介绍下是怎么拿到的，为什么能拿到</p><p>4、三到五年的职业规划</p><p>5、你有什么想了解的</p><p>没有什么技术上的交流，主要是了解个人的项目经历、收获等</p><h1 id="回答" tabindex="-1"><a class="header-anchor" href="#回答"><span>回答</span></a></h1><p>1、略</p><p>2、略</p><h2 id="elasticseach相关" tabindex="-1"><a class="header-anchor" href="#elasticseach相关"><span>ElasticSeach相关</span></a></h2><ul><li><h3 id="排序机制" tabindex="-1"><a class="header-anchor" href="#排序机制"><span>排序机制</span></a></h3></li></ul><p>ElasticSeatch 是一个开源的全文搜索引擎。支持分布式搜索、分析和存储。排序机制是其搜索功能的关键部分</p><ol><li>基于评分的排序：ES默认排序是基于文档的相关性评分进行的。他使用的TF-IDF算法（词频-逆文档频率）来计算每个文档的相关性评分，并根据这个分数来排序返回结果。</li><li>自定义排序字段：除了基于评分的排序外，ES还允许指定字段的值进行排序。可以指定单个或多个字段（日期、数字、字符串都可）选择升序还是降序排序</li><li>复合排序：可以使用多个字段来进行排序，可以按照多个字段的组合顺序设置不同的字段的优先级排序和排序方向</li><li>基于脚本的排序：ES支持通过自定义脚本来定义排序规则。</li><li>分布式排序：ES是一个分布式系统，它能够处理大规模的数据和查询。在进行排序时，它会在分布式节点之间协调并合并排序结果。</li></ol><blockquote><p>TF算法：即词频，表示词条在文本中出现的频率。和搜索关键词在一个文档中出现的次数成正比</p><p>IDF算法：即逆文档频率，反应了一个词在所有文档出现的频率。和搜索关键词在所有文档中出现的频次成反比</p></blockquote><ul><li><h3 id="分词策略" tabindex="-1"><a class="header-anchor" href="#分词策略"><span>分词策略</span></a></h3></li></ul><p>Elasticsearch 中的分词策略是指将文本数据分解成单独的词项（tokens）或者词汇单元（terms），这些词项是搜索引擎用于索引和搜索的基本单位。</p><p>下面是一些ES中常见的分词策略：</p><ol><li><strong>标准分词器（Standard Analyzer）：</strong> 这是 Elasticsearch 默认的分词器。它基于 Unicode 文本分割算法进行分词，去除标点符号和空格，将词汇转换为小写形式，并且支持词干化（stemming）和停用词过滤（stop words filtering）。</li><li><strong>简单分词器（Simple Analyzer）：</strong> 简单分词器按照非字母字符进行分割，将文本转换为小写，并去除停用词。这个分词器适合对语言和语法不太复杂的文本进行分析。</li><li><strong>语言分词器（Language Analyzers）：</strong> Elasticsearch提供了许多针对特定语言优化的分词器，如英文、中文、法文等。这些分词器考虑了特定语言的规则和特性，能够更好地处理相应语言的分词需求。</li><li><strong>自定义分词器（Custom Analyzer）：</strong> Elasticsearch允许用户根据特定的需求自定义分词器，可以组合不同的字符过滤器（character filters）、分词器（tokenizer）和词项过滤器（token filters）来构建符合实际需求的分词策略。</li><li><strong>Edge N-gram 分词器：</strong> 这种分词器创建了词项的前缀，用于实现基于前缀的搜索。例如，可以将单词 &quot;search&quot; 分成 &quot;s&quot;, &quot;se&quot;, &quot;sea&quot;, &quot;sear&quot;, &quot;searc&quot;, &quot;search&quot; 等前缀形式。</li></ol><ul><li><h3 id="倒排索引" tabindex="-1"><a class="header-anchor" href="#倒排索引"><span>倒排索引</span></a></h3></li></ul><p>倒排索引（Inverted Index）是 Elasticsearch 中用于实现全文搜索的核心数据结构之一。它的设计思想是将文档中的词项（terms）与文档的对应关系建立索引，以支持快速的文本搜索。</p><p>以下是倒排索引的基本原理和特点：</p><ol><li><strong>词项与文档的映射关系：</strong> 倒排索引以词项为键（terms），将每个词项与包含这个词项的文档列表建立映射关系。这使得搜索时可以快速地定位包含特定词项的文档。</li><li><strong>支持全文搜索：</strong> 倒排索引能够支持全文搜索，即用户可以搜索文档中的任意词项，而不仅限于文档标题或特定字段。它不仅记录了词项出现在哪些文档中，还记录了词项在文档中的位置等信息，以提供更准确的搜索结果。</li><li><strong>高效的检索和聚合操作：</strong> 倒排索引允许快速地定位包含特定词项的文档，这使得搜索操作变得非常高效。此外，它也支持聚合操作，可以用于计算词项的频率、统计文档数等。</li><li><strong>支持多字段搜索和复杂查询：</strong> Elasticsearch 的倒排索引支持在多个字段上执行搜索操作，还能够处理复杂的布尔查询、范围查询、模糊查询等复杂查询需求。</li></ol><p>倒排索引是Elasticsearch高效进行文本搜索的关键组件之一，它通过将文档的词项与文档的对应关系进行倒置，使得搜索和检索操作变得非常高效。倒排索引的设计和优化对于搜索引擎的性能和效率至关重要。</p><h2 id="mysql相关" tabindex="-1"><a class="header-anchor" href="#mysql相关"><span>MySQL相关</span></a></h2><ul><li><h3 id="慢查询如何优化" tabindex="-1"><a class="header-anchor" href="#慢查询如何优化"><span>慢查询如何优化</span></a></h3></li></ul><ol><li>索引优化：使用EXPLAIN语句分析慢查询sql的查询计划，检查是否使用了正确的索引，分析是否存在索引优化的空间。 <ul><li>查询字段很少，是否存在使用覆盖索引的可能。从而避免回表操作</li></ul></li><li>优化查询语句：确保查询语句搞笑。尽量避免全表扫描、使用select *、避免使用 %like 左模糊查询等。</li><li>表结构和数据类型优化： <ul><li>避免使用过大的数据类型 比如：TEXT</li><li>过于大的表可以考虑分库分表</li><li>连表复杂的情况可以考虑使用数据冗余的方式避免连表操作</li></ul></li><li>MySQL参数调优：根据实际情况考虑来动态调整MySQL参数，如：连接数，缓存池大小等</li><li>使用缓存：使用缓存能有效减少数据库的压力</li><li>业务改造</li></ol><ul><li><h3 id="mysql5-7所有索引类型" tabindex="-1"><a class="header-anchor" href="#mysql5-7所有索引类型"><span>MySQL5.7所有索引类型</span></a></h3></li></ul><ol><li><strong>B-tree 索引：</strong> B-tree（Balanced Tree）是最常见的索引类型，用于普通的索引和唯一索引。它适用于等值查询、范围查询和排序操作。</li><li><strong>哈希索引：</strong> 哈希索引适用于等值查询，但不支持范围查询和排序操作。MySQL 5.7的哈希索引只能用于Memory引擎表（不支持InnoDB）。</li><li><strong>全文索引（Full-Text Index）：</strong> 全文索引适用于全文搜索，允许对文本内容进行全文搜索和匹配。它适用于对文本字段进行关键词搜索的场景。</li><li><strong>空间索引（Spatial Index）：</strong> 空间索引用于优化空间数据类型的查询，例如地理位置信息、地图坐标等。MySQL 5.7支持的空间索引基于R-Tree数据结构。</li><li><strong>前缀索引（Prefix Index）：</strong> 前缀索引允许在不完全存储列值的情况下创建索引，只索引列值的前缀部分。这种索引可以减少索引的存储空间和提高查询性能。</li><li><strong>复合索引（Composite Index）：</strong> 复合索引是指在多个列上创建的组合索引。它可以提高查询效率，尤其适用于联合查询或包含多个条件的查询。</li><li><strong>虚拟列索引（Generated Column Index）：</strong> 虚拟列索引基于虚拟列（Generated Column）创建的索引。虚拟列是根据表中其他列计算出来的值，可以针对这些虚拟列创建索引。</li></ol><ul><li><h3 id="数据太多的分库分表" tabindex="-1"><a class="header-anchor" href="#数据太多的分库分表"><span>数据太多的分库分表</span></a></h3><ul><li><h4 id="垂直分表和水平分表的介绍和区别" tabindex="-1"><a class="header-anchor" href="#垂直分表和水平分表的介绍和区别"><span>垂直分表和水平分表的介绍和区别</span></a></h4></li></ul><ol><li>垂直分表是指将不同的列放入不同的表。如：订单表、订单商品表</li><li>水平分表是指将不同的行根据特定的规则放入不同的表</li><li>垂直分库是指根据业务类型将表进行区分，实现专库专用，比如：用户相关库、订单相关库</li><li>水平分库是指按特定规则将表内数据分到不同的库。如根据创建时间分为冷库和热库</li></ol><ul><li><h4 id="分表维度-hash取余、步长、业务区分" tabindex="-1"><a class="header-anchor" href="#分表维度-hash取余、步长、业务区分"><span>分表维度（hash取余、步长、业务区分）</span></a></h4></li></ul><ol><li>根据字段（时间（冷库、热库）；主键（Hash取余、步长）；范围（id 1~100000、100000 ~ 200000）分表）</li><li>根据业务区分表，比如：湖南用户hunan表，江西用户jiangxi表</li></ol><ul><li><h4 id="分表给业务带来的影响" tabindex="-1"><a class="header-anchor" href="#分表给业务带来的影响"><span>分表给业务带来的影响</span></a></h4></li></ul><ol><li>分表困难，需要进行内存分页</li><li>查询性能：连表的情况得在内存中做数据匹配</li><li>贸然的分表可能会导致业务逻辑变更</li></ol></li></ul><p>5、略</p><h2 id="docker和传统虚拟机的区别" tabindex="-1"><a class="header-anchor" href="#docker和传统虚拟机的区别"><span>Docker和传统虚拟机的区别</span></a></h2><table><thead><tr><th>特征</th><th>传统虚拟机</th><th>Docker容器</th></tr></thead><tbody><tr><td>资源利用率</td><td>每个虚拟机有独立操作系统，资源消耗大</td><td>共享宿主机内核，资源消耗较小</td></tr><tr><td>启动时间</td><td>需要较长时间启动完整的操作系统</td><td>启动速度快，仅加载应用程序和依赖</td></tr><tr><td>资源占用</td><td>需要更多内存和存储空间</td><td>更高效地利用内存和存储空间</td></tr><tr><td>隔离性</td><td>提供较高的隔离性</td><td>隔离性相对较低，但对于大多数场景足够</td></tr></tbody></table><h2 id="五台机器定时任务-如何让它每次执行只会有一台执行到该任务" tabindex="-1"><a class="header-anchor" href="#五台机器定时任务-如何让它每次执行只会有一台执行到该任务"><span>五台机器定时任务，如何让它每次执行只会有一台执行到该任务</span></a></h2><ol><li><p>最简单也是最容易想到的：分布式锁</p><ul><li>利用所有可以共同访问的存储都可以实现，比如mysql，利用事务+前后判断</li></ul></li><li><p>借鉴Redis的哨兵机制，选举机制</p><ul><li>需要借助中间服务，网络io变多很多</li></ul></li></ol><p>8、略</p><p>二面略</p>',53)]))}const p=e(r,[["render",o]]),h=JSON.parse('{"path":"/interview/one/","title":"one","lang":"zh-CN","frontmatter":{"title":"one","createTime":"2025/07/04 10:47:51","permalink":"/interview/one/","tag":["面试"],"description":"1、自我介绍 2、项目介绍 95值示例（简历里写了有关95值轻微洁癖） 3、ElasticSeach相关 排序机制-打分 分词策略 倒排索引 4、MySQL相关 慢查询如何优化 MySQL5.7所有索引类型 数据太多的分库分表 垂直分表和水平分表的介绍和区别 分表维度（hash取余、步长、业务区分） 给业务带来的影响 5、是否处理过内存溢出或相关问题 ...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"one\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-06T15:23:13.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://tesiwoo.top/interview/one/"}],["meta",{"property":"og:title","content":"one"}],["meta",{"property":"og:description","content":"1、自我介绍 2、项目介绍 95值示例（简历里写了有关95值轻微洁癖） 3、ElasticSeach相关 排序机制-打分 分词策略 倒排索引 4、MySQL相关 慢查询如何优化 MySQL5.7所有索引类型 数据太多的分库分表 垂直分表和水平分表的介绍和区别 分表维度（hash取余、步长、业务区分） 给业务带来的影响 5、是否处理过内存溢出或相关问题 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-06T15:23:13.000Z"}],["meta",{"property":"article:tag","content":"面试"}],["meta",{"property":"article:modified_time","content":"2025-07-06T15:23:13.000Z"}]]},"readingTime":{"minutes":9.22,"words":2766},"git":{"createdTime":1751621200000,"updatedTime":1751815393000,"contributors":[{"name":"yuxiang_chu","username":"","email":"yuxiang_chu@sui.com","commits":1,"avatar":"https://gravatar.com/avatar/4ac399a125e46d0ec8629ca6750dfd462f6865f74d1d4865199efd5f4640012f?d=retro"},{"name":"TeSiWoo","username":"TeSiWoo","email":"1666016977@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/TeSiWoo?v=4","url":"https://github.com/TeSiWoo"}]},"autoDesc":true,"filePathRelative":"notes/面试/面经/one.md","headers":[]}');export{p as comp,h as data};
