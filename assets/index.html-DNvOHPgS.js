import{_ as e,c as d,a,o as s}from"./app-DScUAMv8.js";const n={};function r(o,t){return s(),d("div",null,t[0]||(t[0]=[a('<blockquote><p>在了解Redis五种基本数据结构之前，我们首先要知道，Redis里所有的key都是字符串，下面所说的数据结构都是指Redis的值。</p></blockquote><table><thead><tr><th>类型</th><th>底层数据结构</th></tr></thead><tbody><tr><td>String</td><td>动态字符串</td></tr><tr><td>List</td><td>双向链表+压缩列表</td></tr><tr><td>Set</td><td>哈希表+整数数组</td></tr><tr><td>Sort Set</td><td>哈希表+跳表</td></tr><tr><td>Hash</td><td>压缩列表+字典</td></tr></tbody></table><blockquote><p>下面所有的 key,key1..... 表示是键；value1，value2......表示的是值</p></blockquote><h1 id="字符串-string" tabindex="-1"><a class="header-anchor" href="#字符串-string"><span>字符串（String）</span></a></h1><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>Key-String是Redis最基本的数据类型，也是最常用的数据类型。一个key对应一个value。 String类型是二进制安全的，也就是说，他可以保存任何数据。如数字、浮点、字符串、图片或序列化后的对象等。</p><h2 id="常用命令" tabindex="-1"><a class="header-anchor" href="#常用命令"><span>常用命令</span></a></h2><table><thead><tr><th>序号</th><th>命令及描述</th></tr></thead><tbody><tr><td>1</td><td><code>SET key value</code> 设置指定 key 的值</td></tr><tr><td>2</td><td><code>GET key</code> 获取指定 key 的值</td></tr><tr><td>3</td><td><code>GETRANGE key start end</code> 返回 key 中字符串值的子字符</td></tr><tr><td>4</td><td><code>GETSET key value</code> 将给定 key 的值设为 value，并返回 key 的旧值(old value)</td></tr><tr><td>5</td><td><code>GETBIT key offset</code> 对 key 所储存的字符串值，获取指定偏移量上的位(bit)</td></tr><tr><td>6</td><td><code>MGET key1 [key2..]</code> 获取所有(一个或多个)给定 key 的值</td></tr><tr><td>7</td><td><code>SETBIT key offset value</code> 对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)</td></tr><tr><td>8</td><td><code>SETEX key seconds value</code> 将值 value 关联到 key，并将 key 的过期时间设为 seconds (以秒为单位)</td></tr><tr><td>9</td><td><code>SETNX key value</code> 只有在 key 不存在时设置 key 的值</td></tr><tr><td>10</td><td><code>SETRANGE key offset value</code> 用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始</td></tr><tr><td>11</td><td><code>STRLEN key</code> 返回 key 所储存的字符串值的长度</td></tr><tr><td>12</td><td><code>MSET key value [key value ...]</code> 同时设置一个或多个 key-value 对</td></tr><tr><td>13</td><td><code>MSETNX key value [key value ...]</code> 同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在</td></tr><tr><td>14</td><td><code>PSETEX key milliseconds value</code> 这个命令和 SETEX 命令相似，但它以毫秒为单位设置 key 的生存时间</td></tr><tr><td>15</td><td><code>INCR key</code> 将 key 中储存的数字值增一</td></tr><tr><td>16</td><td><code>INCRBY key increment</code> 将 key 所储存的值加上给定的增量值（increment）</td></tr><tr><td>17</td><td><code>INCRBYFLOAT key increment</code> 将 key 所储存的值加上给定的浮点增量值（increment）</td></tr><tr><td>18</td><td><code>DECR key</code> 将 key 中储存的数字值减一</td></tr><tr><td>19</td><td><code>DECRBY key decrement</code> key 所储存的值减去给定的减量值（decrement）</td></tr><tr><td>20</td><td><code>APPEND key value</code> 如果 key 已经存在并且是一个字符串，APPEND 命令将 value 追加到 key 原来的值的末尾</td></tr></tbody></table><h2 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景"><span>使用场景</span></a></h2><ul><li>缓存：使用缓存降低主存储数据库压力</li><li>计数器：利用Redis原子操作性实现计数器。</li><li>单点登录：Spring session + redis实现session共享</li></ul><h1 id="列表-list" tabindex="-1"><a class="header-anchor" href="#列表-list"><span>列表（List）</span></a></h1><h2 id="简介-1" tabindex="-1"><a class="header-anchor" href="#简介-1"><span>简介</span></a></h2><p>Redis列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素导列表的头部（左边）或者尾部（右边） 一个列表最多可以包含 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mn>2</mn><mrow><mn>32</mn><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">2_{32 - 1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8528em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">32</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span></span></span></span> 个元素 (4294967295, 每个列表超过40亿个元素)。</p><h2 id="常用命令-1" tabindex="-1"><a class="header-anchor" href="#常用命令-1"><span>常用命令</span></a></h2><p>以下是转换后的Markdown表格：</p><table><thead><tr><th>序号</th><th>命令及描述</th></tr></thead><tbody><tr><td>1</td><td><code>BLPOP key1 [key2] timeout</code> 移出并获取列表的第一个元素，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td></tr><tr><td>2</td><td><code>BRPOP key1 [key2] timeout</code> 移出并获取列表的最后一个元素，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td></tr><tr><td>3</td><td><code>BRPOPLPUSH source destination timeout</code> 从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它；如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td></tr><tr><td>4</td><td><code>LINDEX key index</code> 通过索引获取列表中的元素</td></tr><tr><td>5</td><td><code>LINSERT key BEFORE|AFTER pivot value</code> 在列表的元素前或者后插入元素</td></tr><tr><td>6</td><td><code>LLEN key</code> 获取列表长度</td></tr><tr><td>7</td><td><code>LPOP key</code> 移出并获取列表的第一个元素</td></tr><tr><td>8</td><td><code>LPUSH key value1 [value2]</code> 将一个或多个值插入到列表头部</td></tr><tr><td>9</td><td><code>LPUSHX key value</code> 将一个或多个值插入到已存在的列表头部</td></tr><tr><td>10</td><td><code>LRANGE key start stop</code> 获取列表指定范围内的元素</td></tr><tr><td>11</td><td><code>LREM key count value</code> 移除列表元素</td></tr><tr><td>12</td><td><code>LSET key index value</code> 通过索引设置列表元素的值</td></tr><tr><td>13</td><td><code>LTRIM key start stop</code> 对一个列表进行修剪(trim)，即让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。</td></tr><tr><td>14</td><td><code>RPOP key</code> 移除并获取列表最后一个元素</td></tr><tr><td>15</td><td><code>RPOPLPUSH source destination</code> 移除列表的最后一个元素，并将该元素添加到另一个列表并返回</td></tr><tr><td>16</td><td><code>RPUSH key value1 [value2]</code> 在列表中添加一个或多个值</td></tr><tr><td>17</td><td><code>RPUSHX key value</code> 为已存在的列表添加值</td></tr></tbody></table><h2 id="使用场景-1" tabindex="-1"><a class="header-anchor" href="#使用场景-1"><span>使用场景</span></a></h2><ul><li>构造Redis简单MQ消息队列</li></ul><h1 id="集合-set" tabindex="-1"><a class="header-anchor" href="#集合-set"><span>集合（Set）</span></a></h1><h2 id="简介-2" tabindex="-1"><a class="header-anchor" href="#简介-2"><span>简介</span></a></h2><p>Redis的Set是string类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据。 Redis 中 集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。 集合中最大的成员数为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mn>2</mn><mrow><mn>32</mn><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">2_{32 - 1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8528em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">32</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span></span></span></span> (4294967295, 每个集合可存储40多亿个成员)。</p><h2 id="常用命令-2" tabindex="-1"><a class="header-anchor" href="#常用命令-2"><span>常用命令</span></a></h2><table><thead><tr><th>序号</th><th>命令及描述</th></tr></thead><tbody><tr><td>1</td><td><code>BLPOP key1 [key2] timeout</code> 移出并获取列表的第一个元素，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td></tr><tr><td>2</td><td><code>BRPOP key1 [key2] timeout</code> 移出并获取列表的最后一个元素，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td></tr><tr><td>3</td><td><code>BRPOPLPUSH source destination timeout</code> 从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它；如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td></tr><tr><td>4</td><td><code>LINDEX key index</code> 通过索引获取列表中的元素</td></tr><tr><td>5</td><td><code>LINSERT key BEFORE|AFTER pivot value</code> 在列表的元素前或者后插入元素</td></tr><tr><td>6</td><td><code>LLEN key</code> 获取列表长度</td></tr><tr><td>7</td><td><code>LPOP key</code> 移出并获取列表的第一个元素</td></tr><tr><td>8</td><td><code>LPUSH key value1 [value2]</code> 将一个或多个值插入到列表头部</td></tr><tr><td>9</td><td><code>LPUSHX key value</code> 将一个或多个值插入到已存在的列表头部</td></tr><tr><td>10</td><td><code>LRANGE key start stop</code> 获取列表指定范围内的元素</td></tr><tr><td>11</td><td><code>LREM key count value</code> 移除列表元素</td></tr><tr><td>12</td><td><code>LSET key index value</code> 通过索引设置列表元素的值</td></tr><tr><td>13</td><td><code>LTRIM key start stop</code> 对一个列表进行修剪(trim)，即让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。</td></tr><tr><td>14</td><td><code>RPOP key</code> 移除并获取列表最后一个元素</td></tr><tr><td>15</td><td><code>RPOPLPUSH source destination</code> 移除列表的最后一个元素，并将该元素添加到另一个列表并返回</td></tr><tr><td>16</td><td><code>RPUSH key value1 [value2]</code> 在列表中添加一个或多个值</td></tr><tr><td>17</td><td><code>RPUSHX key value</code> 为已存在的列表添加值</td></tr></tbody></table><h2 id="使用场景-2" tabindex="-1"><a class="header-anchor" href="#使用场景-2"><span>使用场景</span></a></h2><ul><li>进行数据统计，求数学概念的交集、并集、差集等。如：共同好友、共同关注</li><li>去重存储:如黑名单</li><li>抽奖/随机推荐</li><li>标签系统，可以通过SMEMEBERS获取所有标签</li></ul><h1 id="有序集合-sort-set" tabindex="-1"><a class="header-anchor" href="#有序集合-sort-set"><span>有序集合（Sort Set）</span></a></h1><h2 id="简介-3" tabindex="-1"><a class="header-anchor" href="#简介-3"><span>简介</span></a></h2><p>Redis有序集合和集合一样也是String类型元素的集合，且不允许重复的元素。 不同的是Sort set每个元素会关联一个double类型的分数。Redis正是通过这个分数来为集合中的元素进行从小到大的排序。 有序集合的成员都是唯一的， 但是分数可以重复 集合是通过哈希表来实现的，所以添加、删除、查找的复杂度都是O(1)。集合中最大的成员数是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mn>2</mn><mrow><mn>32</mn><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">2_{32-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8528em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">32</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span></span></span></span>个，大概是40亿个。</p><h2 id="常用命令-3" tabindex="-1"><a class="header-anchor" href="#常用命令-3"><span>常用命令</span></a></h2><table><thead><tr><th>序号</th><th>命令及描述</th></tr></thead><tbody><tr><td>1</td><td><code>ZADD key score1 member1 [score2 member2]</code> 向有序集合添加一个或多个成员，或者更新已存在成员的分数</td></tr><tr><td>2</td><td><code>ZCARD key</code> 获取有序集合的成员数</td></tr><tr><td>3</td><td><code>ZCOUNT key min max</code> 计算在有序集合中指定区间分数的成员数</td></tr><tr><td>4</td><td><code>ZINCRBY key increment member</code> 有序集合中对指定成员的分数加上增量 increment</td></tr><tr><td>5</td><td><code>ZINTERSTORE destination numkeys key [key ...]</code> 计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中</td></tr><tr><td>6</td><td><code>ZLEXCOUNT key min max</code> 在有序集合中计算指定字典区间内成员数量</td></tr><tr><td>7</td><td><code>ZRANGE key start stop [WITHSCORES]</code> 通过索引区间返回有序集合成指定区间内的成员</td></tr><tr><td>8</td><td><code>ZRANGEBYLEX key min max [LIMIT offset count]</code> 通过字典区间返回有序集合的成员</td></tr><tr><td>9</td><td><code>ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT]</code> 通过分数返回有序集合指定区间内的成员</td></tr><tr><td>10</td><td><code>ZRANK key member</code> 返回有序集合中指定成员的索引</td></tr><tr><td>11</td><td><code>ZREM key member [member ...]</code> 移除有序集合中的一个或多个成员</td></tr><tr><td>12</td><td><code>ZREMRANGEBYLEX key min max</code> 移除有序集合中给定的字典区间的所有成员</td></tr><tr><td>13</td><td><code>ZREMRANGEBYRANK key start stop</code> 移除有序集合中给定的排名区间的所有成员</td></tr><tr><td>14</td><td><code>ZREMRANGEBYSCORE key min max</code> 移除有序集合中给定的分数区间的所有成员</td></tr><tr><td>15</td><td><code>ZREVRANGE key start stop [WITHSCORES]</code> 返回有序集中指定区间内的成员，通过索引，分数从高到底</td></tr><tr><td>16</td><td><code>ZREVRANGEBYSCORE key max min [WITHSCORES]</code> 返回有序集中指定分数区间内的成员，分数从高到低排序</td></tr><tr><td>17</td><td><code>ZREVRANK key member</code> 返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序</td></tr><tr><td>18</td><td><code>ZSCORE key member</code> 返回有序集中，成员的分数值</td></tr><tr><td>19</td><td><code>ZUNIONSTORE destination numkeys key [key ...]</code> 计算给定的一个或多个有序集的并集，并存储在新的 key 中</td></tr><tr><td>20</td><td><code>ZSCAN key cursor [MATCH pattern] [COUNT count]</code> 迭代有序集合中的元素（包括元素成员和元素分值）</td></tr></tbody></table><h2 id="使用场景-3" tabindex="-1"><a class="header-anchor" href="#使用场景-3"><span>使用场景</span></a></h2><ul><li>排行榜</li><li>延迟队列：通过分数查询队列再弹出</li><li>范围查询：使用<code>ZARANGEBYSCORE</code>快速筛选</li><li>优先级任务，通过分数来控制任务的优先级</li></ul><h1 id="哈希-hash" tabindex="-1"><a class="header-anchor" href="#哈希-hash"><span>哈希（Hash）</span></a></h1><h2 id="简介-4" tabindex="-1"><a class="header-anchor" href="#简介-4"><span>简介</span></a></h2><p>Redis hash 是一个string类型的field和value的映射表，hash特别适合用于存储对象。 Redis 中每个 hash 可以存储 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mn>2</mn><mrow><mn>32</mn><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">2_{32 - 1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8528em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">32</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span></span></span></span> 键值对（40多亿）。</p><h2 id="常用命令-4" tabindex="-1"><a class="header-anchor" href="#常用命令-4"><span>常用命令</span></a></h2><table><thead><tr><th>序号</th><th>命令及描述</th></tr></thead><tbody><tr><td>1</td><td><code>HDEL key field1 [field2]</code> 删除一个或多个哈希表字段</td></tr><tr><td>2</td><td><code>HEXISTS key field</code> 查看哈希表 key 中，指定的字段是否存在</td></tr><tr><td>3</td><td><code>HGET key field</code> 获取存储在哈希表中指定字段的值</td></tr><tr><td>4</td><td><code>HGETALL key</code> 获取在哈希表中指定 key 的所有字段和值</td></tr><tr><td>5</td><td><code>HINCRBY key field increment</code> 为哈希表 key 中的指定字段的整数值加上增量 increment</td></tr><tr><td>6</td><td><code>HINCRBYFLOAT key field increment</code> 为哈希表 key 中的指定字段的浮点数值加上增量 increment</td></tr><tr><td>7</td><td><code>HKEYS key</code> 获取所有哈希表中的字段</td></tr><tr><td>8</td><td><code>HLEN key</code> 获取哈希表中字段的数量</td></tr><tr><td>9</td><td><code>HMGET key field1 [field2]</code> 获取所有给定字段的值</td></tr><tr><td>10</td><td><code>HMSET key field1 value1 [field2 value2]</code> 同时将多个 field-value (域-值)对设置到哈希表 key 中</td></tr><tr><td>11</td><td><code>HSET key field value</code> 将哈希表 key 中的字段 field 的值设为 value</td></tr><tr><td>12</td><td><code>HSETNX key field value</code> 只有在字段 field 不存在时，设置哈希表字段的值</td></tr><tr><td>13</td><td><code>HVALS key</code> 获取哈希表中所有值</td></tr><tr><td>14</td><td><code>HSCAN key cursor [MATCH pattern] [COUNT count]</code> 迭代哈希表中的键值对</td></tr></tbody></table><h2 id="使用场景-4" tabindex="-1"><a class="header-anchor" href="#使用场景-4"><span>使用场景</span></a></h2><ul><li>对象存储,避免序列化开销</li><li>缓存字段更新：存储对象是可以单独更新某个字段，无需读写整个对象</li><li>购物车： eg: 用户Id为key、商品id为filed、数量为value</li><li>配置关系： 存储系统配置项，支持按需读取</li></ul>',39)]))}const i=e(n,[["render",r]]),l=JSON.parse('{"path":"/db/redis-base-type/","title":"Redis的基本类型","lang":"zh-CN","frontmatter":{"title":"Redis的基本类型","createTime":"2025/07/04 18:05:55","permalink":"/db/redis-base-type/","tag":["Redis"],"description":"在了解Redis五种基本数据结构之前，我们首先要知道，Redis里所有的key都是字符串，下面所说的数据结构都是指Redis的值。 下面所有的 key,key1..... 表示是键；value1，value2......表示的是值 字符串（String） 简介 Key-String是Redis最基本的数据类型，也是最常用的数据类型。一个key对应一个v...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Redis的基本类型\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-07T02:54:17.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://tesiwoo.top/db/redis-base-type/"}],["meta",{"property":"og:title","content":"Redis的基本类型"}],["meta",{"property":"og:description","content":"在了解Redis五种基本数据结构之前，我们首先要知道，Redis里所有的key都是字符串，下面所说的数据结构都是指Redis的值。 下面所有的 key,key1..... 表示是键；value1，value2......表示的是值 字符串（String） 简介 Key-String是Redis最基本的数据类型，也是最常用的数据类型。一个key对应一个v..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-07T02:54:17.000Z"}],["meta",{"property":"article:tag","content":"Redis"}],["meta",{"property":"article:modified_time","content":"2025-07-07T02:54:17.000Z"}]]},"readingTime":{"minutes":9.94,"words":2981},"git":{"createdTime":1751856857000,"updatedTime":1751856857000,"contributors":[{"name":"yuxiang_chu","username":"","email":"yuxiang_chu@sui.com","commits":1,"avatar":"https://gravatar.com/avatar/4ac399a125e46d0ec8629ca6750dfd462f6865f74d1d4865199efd5f4640012f?d=retro"}]},"autoDesc":true,"filePathRelative":"notes/数据库/redis/01.Redis的基本类型.md","headers":[]}');export{i as comp,l as data};
