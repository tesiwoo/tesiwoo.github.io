import{_ as e,c as s,a as i,o as a}from"./app-DScUAMv8.js";const p="/assets/image-20201002132021474-BpfZyrHB.png",o="/assets/image-20201002132600836-DheRkoW2.png",n="/assets/image-20201015204718336-Bw-0Wlu8.png",r={};function l(c,t){return a(),s("div",null,t[0]||(t[0]=[i('<p>HTTP协议是<strong>超文本传输协议</strong>，用于从万维网服务器传输超文本到浏览器的传输协议。</p><p>它是<strong>基于TCP/IP通信协议</strong>来传递数据的。</p><p>HTTP协议工作于C/S（客户端/服务器）架构上。</p><p>属于<strong>应用层</strong>，<strong>面向对象的</strong>协议。</p><p><strong>特点：</strong></p><ul><li>简单快速</li><li>灵活</li><li>无连接（每次只处理一个请求）</li><li>无状态（不保存传输的信息，<strong>HTTP1.1版本后引入Cookie技术</strong>）</li><li>支持B/S、C/S架构</li></ul><p><strong>URL</strong></p><p>http协议使用统一资源定标识符（Uniform Resources Identifiers：URI）来传输数据和建立连接。</p><p>URL是一种特殊的URI，全称为统一资源定位符（Uniform Resources Locader）。它包含了用于查找某个资源所需要的所有信息。用于在互联网上确认某一处的资源</p><p>组成：</p><p>​ <strong><code>协议部分</code>://<code>域名部分</code>:<code>端口部门</code>/<code>虚拟目录部分</code>/<code>文件名部分</code>?<code>参数部门</code>#<code>锚部分</code></strong></p><p>eg：http://localhost:8080/admin/index.html?a=1#name</p><p><strong>请求消息Request</strong></p><p>格式：</p><p><img src="'+p+'" alt="image-20201002132021474" width="624" height="490"></p><p><strong>响应消息Response</strong></p><p><img src="'+o+'" alt="image-20201002132600836" width="534" height="455"></p><p><strong>HTTP状态码</strong></p><p>1XX：消息（没看到过哈哈哈）</p><p>2XX：成功</p><p>3XX：重定向（再来一道面试题：你知道301和302的区别吗？都是重定向哦，答案在最后）</p><p>4XX：客户端错误（检查路径，参数等）</p><p>5XX：服务端错误（打开命令窗口查看错误）</p><p><strong>HTTP工作原理</strong></p><ol><li>客户端连接到Web服务器（先会通过DNS解析 域名找到服务端的ip地址咯，绕后通过TCP三次握手建立连接，这个我写过）</li><li>发送http请求</li><li>服务端接受请求并返回http响应</li><li>释放TCP连接</li><li>客户端浏览器解析响应正文展示到浏览器窗口</li></ol><h1 id="http与https的区别" tabindex="-1"><a class="header-anchor" href="#http与https的区别"><span>Http与https的区别</span></a></h1><p>Https比http多了secure（安全）性这个概念，实际上，Https并不是一个全新的应用层协议，它其实就是HTTP+TSL/SSL协议组合而成的，而安全性的保证正是TLS/SSL 所做的工作</p><p><strong>HTTPS 就是身披了一层 SSL 的 HTTP</strong>。</p><p><img src="'+n+`" alt="image-20201015204718336" width="519" height="305"></p><ul><li>最简单的，HTTP在地址栏以http://开头，而https是以https://开头</li><li>Http 是未经安全加密的协议，它的传输过程中容易被攻击者监听、数据容易被盗取，发送方和接收方容易被伪造；而https是安全的协议，它通过<strong>秘钥交换算法-签名算法-对称加密算法-摘要算法</strong> 能够解决这些问题</li><li>HTTP的默认端口是80，HTTPS的默认端口是443</li></ul><h1 id="http的get和post的区别" tabindex="-1"><a class="header-anchor" href="#http的get和post的区别"><span>HTTP的GET和POST的区别</span></a></h1><p>HTTP 中包括许多方法，<strong>Get 和 Post 是 HTTP 中最常用的两个方法</strong>，基本上使用 HTTP 方法中有 99% 都是在使用 Get 方法和 Post 方法，所以有必要我们对这两个方法有更加深刻的认识。</p><ul><li><p>get 方法一般用于请求，比如你在浏览器地址栏输入 www.cxuanblog.com 其实就是发送了一个 get 请求，它的主要特征是请求服务器返回资源，而 post 方法一般用于</p><p>表单的提交，相当于是把信息提交给服务器，等待服务器作出响应，get 相当于一个是 pull/拉的操作，而 post 相当于是一个 push/推的操作。</p></li><li><p>get 方法是不安全的，因为你在发送请求的过程中，你的请求参数会拼在 URL 后面，从而导致容易被攻击者窃取，对你的信息造成破坏和伪造；</p></li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>/test/demo_form.asp?name1=value1&amp;name2=value2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>而 post 方法是把参数放在请求体 body 中的，这对用户来说不可见。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>POST /test/demo_form.asp HTTP/1.1</span></span>
<span class="line"><span>Host: w3schools.com</span></span>
<span class="line"><span>name1=value1&amp;name2=value2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>get 请求的 URL 有长度限制，而 post 请求会把参数和值放在消息体中，对数据长度没有要求。</li><li>get 请求会被浏览器主动 cache，而 post 不会，除非手动设置。</li><li>get 请求在浏览器反复的 回退/前进 操作是无害的，而 post 操作会再次提交表单请求。</li><li>get 请求在发送过程中会产生一个 TCP 数据包；post 在发送过程中会产生两个 TCP 数据包。对于 get 方式的请求，浏览器会把 http header 和 data 一并发送出去，服务器响应 200（返回数据）；而对于 post，浏览器先发送 header，服务器响应 100 continue，浏览器再发送 data，服务器响应 200 ok（返回数据）。</li></ul>`,37)]))}const g=e(r,[["render",l]]),h=JSON.parse('{"path":"/JAVA/http-agreement/","title":"网络协议","lang":"zh-CN","frontmatter":{"title":"网络协议","createTime":"2025/07/03 17:57:45","permalink":"/JAVA/http-agreement/","tag":["网络协议"],"description":"HTTP协议是超文本传输协议，用于从万维网服务器传输超文本到浏览器的传输协议。 它是基于TCP/IP通信协议来传递数据的。 HTTP协议工作于C/S（客户端/服务器）架构上。 属于应用层，面向对象的协议。 特点： 简单快速 灵活 无连接（每次只处理一个请求） 无状态（不保存传输的信息，HTTP1.1版本后引入Cookie技术） 支持B/S、C/S架构 ...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"网络协议\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-06T15:23:13.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://tesiwoo.top/JAVA/http-agreement/"}],["meta",{"property":"og:title","content":"网络协议"}],["meta",{"property":"og:description","content":"HTTP协议是超文本传输协议，用于从万维网服务器传输超文本到浏览器的传输协议。 它是基于TCP/IP通信协议来传递数据的。 HTTP协议工作于C/S（客户端/服务器）架构上。 属于应用层，面向对象的协议。 特点： 简单快速 灵活 无连接（每次只处理一个请求） 无状态（不保存传输的信息，HTTP1.1版本后引入Cookie技术） 支持B/S、C/S架构 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-06T15:23:13.000Z"}],["meta",{"property":"article:tag","content":"网络协议"}],["meta",{"property":"article:modified_time","content":"2025-07-06T15:23:13.000Z"}]]},"readingTime":{"minutes":3.81,"words":1143},"git":{"createdTime":1751537663000,"updatedTime":1751815393000,"contributors":[{"name":"yuxiang_chu","username":"","email":"yuxiang_chu@sui.com","commits":2,"avatar":"https://gravatar.com/avatar/4ac399a125e46d0ec8629ca6750dfd462f6865f74d1d4865199efd5f4640012f?d=retro"},{"name":"TeSiWoo","username":"TeSiWoo","email":"1666016977@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/TeSiWoo?v=4","url":"https://github.com/TeSiWoo"}]},"autoDesc":true,"filePathRelative":"notes/JAVA/基础/http-agreement.md","headers":[]}');export{g as comp,h as data};
