import{_ as r,c as e,a,o as s}from"./app-DScUAMv8.js";const o={};function i(n,t){return s(),e("div",null,t[0]||(t[0]=[a('<p>List有三个子类，ArrayList、Vector和LinkedList。</p><p>其中，ArrayList和Vector是线性表，底层是使用Object的数组容器去存储数据的，添加了很多方法来维护这个数组，使其容量可以动态增长，极大的提升了开发效率。</p><p>**差别：**ArrayList是非同步的，Vector是同步的。</p><p>LinkedList是链表，略懂数据结构就知道其实现原理了。链表随机位置插入、删除数据时比线性表快，遍历比线性表慢。</p><p><strong>由此可根据实际情况来选择使用ArrayList（非同步、非频繁删除时选择）、Vector（需同步时选择）、LinkedList（频繁在任意位置插入、删除时选择）。</strong></p><h1 id="arraylist" tabindex="-1"><a class="header-anchor" href="#arraylist"><span>ArrayList</span></a></h1><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍：</span></a></h2><p>ArrayList 的底层是数组队列，相当于动态数组。与 Java 中的数组相比，它的容量能动态增长。在添加大量元素前，应用程序可以使用<code>ensureCapacity</code>操作来增加 ArrayList 实例的容量。这可以减少递增式再分配的数量。</p><p>它继承于 <strong>AbstractList</strong>，实现了 <strong>List</strong>, <strong>RandomAccess</strong>, <strong>Cloneable</strong>, <strong>java.io.Serializable</strong> 这些接口。</p><p>在我们学数据结构的时候就知道了线性表的顺序存储，插入删除元素的时间复杂度为<strong>O（n）</strong>,求表长以及增加元素，取第 i 元素的时间复杂度为<strong>O（1）</strong></p><p>​ ArrayList 继承了AbstractList，实现了List。它是一个数组队列，提供了相关的添加、删除、修改、遍历等功能。</p><p>​ ArrayList 实现了<strong>RandomAccess 接口</strong>， RandomAccess 是一个标志接口，表明实现这个这个接口的 List 集合是支持<strong>快速随机访问</strong>的。在 ArrayList 中，我们即可以通过元素的序号快速获取元素对象，这就是快速随机访问。</p><p>​ ArrayList 实现了<strong>Cloneable 接口</strong>，即覆盖了函数 clone()，<strong>能被克隆</strong>。</p><p>​ ArrayList 实现<strong>java.io.Serializable 接口</strong>，这意味着ArrayList<strong>支持序列化</strong>，<strong>能通过序列化去传输</strong>。</p><p>​ 和 Vector 不同，<strong>ArrayList 中的操作不是线程安全的</strong>！所以，建议在单线程中才使用 ArrayList，而在多线程中可以选择 Vector 或者 CopyOnWriteArrayList。</p>',15)]))}const p=r(o,[["render",i]]),g=JSON.parse('{"path":"/JAVA/y9ukrgam/","title":"列表-List","lang":"zh-CN","frontmatter":{"title":"列表-List","createTime":"2025/07/04 10:45:44","permalink":"/JAVA/y9ukrgam/","description":"List有三个子类，ArrayList、Vector和LinkedList。 其中，ArrayList和Vector是线性表，底层是使用Object的数组容器去存储数据的，添加了很多方法来维护这个数组，使其容量可以动态增长，极大的提升了开发效率。 **差别：**ArrayList是非同步的，Vector是同步的。 LinkedList是链表，略懂数据结...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"列表-List\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-06T15:23:13.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://tesiwoo.top/JAVA/y9ukrgam/"}],["meta",{"property":"og:title","content":"列表-List"}],["meta",{"property":"og:description","content":"List有三个子类，ArrayList、Vector和LinkedList。 其中，ArrayList和Vector是线性表，底层是使用Object的数组容器去存储数据的，添加了很多方法来维护这个数组，使其容量可以动态增长，极大的提升了开发效率。 **差别：**ArrayList是非同步的，Vector是同步的。 LinkedList是链表，略懂数据结..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-06T15:23:13.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-06T15:23:13.000Z"}]]},"readingTime":{"minutes":1.78,"words":535},"git":{"createdTime":1751621200000,"updatedTime":1751815393000,"contributors":[{"name":"yuxiang_chu","username":"","email":"yuxiang_chu@sui.com","commits":1,"avatar":"https://gravatar.com/avatar/4ac399a125e46d0ec8629ca6750dfd462f6865f74d1d4865199efd5f4640012f?d=retro"},{"name":"TeSiWoo","username":"TeSiWoo","email":"1666016977@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/TeSiWoo?v=4","url":"https://github.com/TeSiWoo"}]},"autoDesc":true,"filePathRelative":"notes/JAVA/集合/list.md","headers":[]}');export{p as comp,g as data};
