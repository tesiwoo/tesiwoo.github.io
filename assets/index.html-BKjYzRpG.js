import{_ as i,c as a,a as e,o as n}from"./app-DScUAMv8.js";const t={};function l(h,s){return n(),a("div",null,s[0]||(s[0]=[e(`<p><strong>instanceof是一个位运算符（二目运算符）</strong></p><h2 id="用法" tabindex="-1"><a class="header-anchor" href="#用法"><span>用法：</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">boolean</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> result</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> obj </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">instanceof</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> class</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其中 obj是一个对象，class 代表一个类或者一个接口，返回boolean类型。返回true: 表示obj这个对象是class这个对象的直接子类或间接子类</p><h3 id="注意点" tabindex="-1"><a class="header-anchor" href="#注意点"><span>注意点：</span></a></h3><pre><code>- obj 不能为基本数据类型，会抛出 ClassCastException 异常
- obj 为null 的时候永远返回false
- obj 为引用类型的时候才会判断
</code></pre><h2 id="底层设计逻辑" tabindex="-1"><a class="header-anchor" href="#底层设计逻辑"><span>底层设计逻辑：</span></a></h2><pre><code>先判断 obj是否为null，为null返回false，然后强转obj为class对象不抛出异常即返回true否则为false
</code></pre><p>伪代码：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">obj </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">==</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> null</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">){</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> false</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> else</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    try</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        T</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> temp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">T</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">obj</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        return</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> true</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> catch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">ClassCastException </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">e</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">){</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        return</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> false</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实现逻辑" tabindex="-1"><a class="header-anchor" href="#实现逻辑"><span>实现逻辑：</span></a></h2><ul><li>看这个<a href="https://www.zhihu.com/question/21574535" target="_blank" rel="noopener noreferrer">大佬</a>的吧 简直牛逼吼吼</li></ul>`,12)]))}const p=i(t,[["render",l]]),k=JSON.parse('{"path":"/JAVA/keywords/","title":"关键词","lang":"zh-CN","frontmatter":{"title":"关键词","createTime":"2025/07/03 17:57:45","permalink":"/JAVA/keywords/","description":"instanceof是一个位运算符（二目运算符） 用法： 其中 obj是一个对象，class 代表一个类或者一个接口，返回boolean类型。返回true: 表示obj这个对象是class这个对象的直接子类或间接子类 注意点： 底层设计逻辑： 伪代码： 实现逻辑： 看这个大佬的吧 简直牛逼吼吼","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"关键词\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-06T15:23:13.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://tesiwoo.top/JAVA/keywords/"}],["meta",{"property":"og:title","content":"关键词"}],["meta",{"property":"og:description","content":"instanceof是一个位运算符（二目运算符） 用法： 其中 obj是一个对象，class 代表一个类或者一个接口，返回boolean类型。返回true: 表示obj这个对象是class这个对象的直接子类或间接子类 注意点： 底层设计逻辑： 伪代码： 实现逻辑： 看这个大佬的吧 简直牛逼吼吼"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-06T15:23:13.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-06T15:23:13.000Z"}]]},"readingTime":{"minutes":0.7,"words":209},"git":{"createdTime":1751537663000,"updatedTime":1751815393000,"contributors":[{"name":"yuxiang_chu","username":"","email":"yuxiang_chu@sui.com","commits":2,"avatar":"https://gravatar.com/avatar/4ac399a125e46d0ec8629ca6750dfd462f6865f74d1d4865199efd5f4640012f?d=retro"},{"name":"TeSiWoo","username":"TeSiWoo","email":"1666016977@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/TeSiWoo?v=4","url":"https://github.com/TeSiWoo"}]},"autoDesc":true,"filePathRelative":"notes/JAVA/基础/keywords.md","headers":[]}');export{p as comp,k as data};
