import{_ as i,c as a,a as n,o as e}from"./app-DScUAMv8.js";const l="/assets/image-20201014153254394-DRmIYY2D.png",t="/assets/clipboard-BpY6xyow.png",h="/assets/clipboard123-Bf6Jx1cj.png",p={};function k(r,s){return e(),a("div",null,s[0]||(s[0]=[n(`<p>索引是在存储引擎层实现的，而不是在服务器上实现的，所以不同的存储引擎具有不用的索引类型和实现。</p><h2 id="索引的作用" tabindex="-1"><a class="header-anchor" href="#索引的作用"><span>索引的作用</span></a></h2><ul><li>提高索引速度</li><li>确保数据的一致性</li><li>可以加速表和表之间的连接、实现表与表之间的参照完整性</li><li>使用分组和排序字句进行数据检索时，可以显著减少分组和排序的时间</li></ul><h2 id="分类" tabindex="-1"><a class="header-anchor" href="#分类"><span>分类</span></a></h2><h3 id="b-树索引" tabindex="-1"><a class="header-anchor" href="#b-树索引"><span>B+树索引</span></a></h3><p>它是mysql大多存储引擎的默认索引类型。</p><ul><li>因为不再需要进行全局扫描，只需要对树的进行搜索即可，所以查找速度快很多</li><li>因为B +Tree的有序性，所以除了用于查找，还可以用于排序和分组</li><li>可以指定多个列作为索引列，多个索引列共同组成键</li><li>适用于全键值，键值范围和键前缀查找，其中键前缀查找只适用于最左前缀查找。如果不是按照索引列的顺序列的顺序进行查找，则无法适用索引。</li></ul><p>INNODB的B+ 树索引分为主索引和辅助索引。主索引的叶子节点data域记录着完整的数据记录，这种索引方式被称为聚簇索引。因为无法吧数据存在两个不同的地方，索引一张表只能有一个聚簇索引。</p><p>辅助索引的叶子节点的data域记录着主键的值，因此在使用辅助索引进行查找时，需要先找到主键值，然后再到主索引中进行查找，这个过程也称之为回表。</p><h3 id="主键索引" tabindex="-1"><a class="header-anchor" href="#主键索引"><span>主键索引</span></a></h3><p>主键：某一个属性可以唯一的标识一条记录</p><p>特点：</p><ul><li>最常见的索引类型</li><li>确保数据记录的唯一性</li><li>确定特定数据记录在数据库中的位置</li></ul><h3 id="哈希索引" tabindex="-1"><a class="header-anchor" href="#哈希索引"><span>哈希索引</span></a></h3><p>哈希索引能以O(1)时间进行查找，但是失去了有序性。</p><ul><li>无法用于排序和分组。</li><li>只支持精确查找，无法用于部分查找和范围查找。</li></ul><p>InnoDB 存储引擎有一个特殊的功能叫“自适应哈希索引”，当某个索引值被使用的非常频繁时，会在 B+Tree 索引之上再创建一个哈希索引，这样就让 B+Tree 索引具有哈希索引的一些优点，比如快速的哈希查找。</p><h3 id="空间数据索引" tabindex="-1"><a class="header-anchor" href="#空间数据索引"><span>空间数据索引</span></a></h3><p>MyISAM 存储引擎支持空间数据索引（R-Tree），可以用于地理数据存储。空间数据索引会从所有维度来索引数据，可以有效地使用任意维度来进行组合查询。</p><p>必须使用 GIS 相关的函数来维护数据。</p><h3 id="唯一索引" tabindex="-1"><a class="header-anchor" href="#唯一索引"><span>唯一索引</span></a></h3><p>作用：避免用一个表中某数据列中的值重复</p><p>与主键索引的区别：主键索引只能有一个，唯一索引可以有多个</p><h3 id="常规索引" tabindex="-1"><a class="header-anchor" href="#常规索引"><span>常规索引</span></a></h3><p>作用：快速定位特定数据</p><p>注意：</p><ul><li>index与key关键字都可以设置常规索引</li><li>应加在查询找条件的字段</li><li>不宜添加太多常规索引，会影响数据的插入、删除和修改操作</li></ul><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">CREATE</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> TABLE</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> \`</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">result</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">\`(</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">   -- 省略一些代码</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  INDEX</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">KEY</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> \`</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">ind</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">\`</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">\`</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">studentNo</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">\`</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">\`</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">subjectNo</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">\`</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">-- 创建表时添加  ind是索引名</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">-- 创建后添加</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">ALTER</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> TABLE</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> \`</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">result</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">\`</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> ADD</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> INDEX</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> \`</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">ind</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">\`</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">\`</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">studentNo</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">\`</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">\`</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">subjectNo</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">\`</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="全文索引" tabindex="-1"><a class="header-anchor" href="#全文索引"><span>全文索引</span></a></h3><p>作用：快速定位特定数据，用于查找文本中的关键字，而不是直接比较是否相同</p><p>注意：</p><ul><li>只能用于MyIsAm类型的数据表</li><li>只能用于char、varchar、text数据列类型</li><li>适合大型数据库</li><li>查找条件使用 MATCH AGAINST，而不是普通的 WHERE。</li><li>全文索引使用倒排索引实现，它记录着关键词到其所在文档的映射。</li><li>InnoDB 存储引擎在 MySQL 5.6.4 版本中也开始支持全文索引。</li></ul><h2 id="创建方式" tabindex="-1"><a class="header-anchor" href="#创建方式"><span>创建方式</span></a></h2><div class="language-sql line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="sql" style="--vp-collapsed-lines:15;--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">/*</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#方法一：创建表时</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  　　CREATE TABLE 表名 (</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">               字段名1 数据类型 [完整性约束条件…],</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">               字段名2 数据类型 [完整性约束条件…],</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">               [UNIQUE | FULLTEXT | SPATIAL ]   INDEX | KEY</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">               [索引名] (字段名[(长度)] [ASC |DESC])</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">               );</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#方法二：CREATE在已存在的表上创建索引</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">       CREATE [UNIQUE | FULLTEXT | SPATIAL ] INDEX 索引名</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">                    ON 表名 (字段名[(长度)] [ASC |DESC]) ;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#方法三：ALTER TABLE在已存在的表上创建索引</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">       ALTER TABLE 表名 ADD [UNIQUE | FULLTEXT | SPATIAL ] INDEX</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">                            索引名 (字段名[(长度)] [ASC |DESC]) ;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">                           </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">                           </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#删除索引：DROP INDEX 索引名 ON 表名字;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#删除主键索引: ALTER TABLE 表名 DROP PRIMARY KEY;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#显示索引信息: SHOW INDEX FROM student;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">/* 增加全文索引 */</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">ALTER</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> TABLE</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> \`</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">school</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">\`</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">\`</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">student</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">\`</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> ADD</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> FULLTEXT</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> INDEX</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> \`</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">studentname</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">\`</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">\`</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">StudentName</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">\`</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">/*EXPLAIN : 分析SQL语句执行性能*/</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">EXPLAIN </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">SELECT</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> FROM</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> student </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">WHERE</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> studentno</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">1000</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">/* 使用全文索引 */</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">-- 全文搜索通过 MATCH() 函数完成。</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">-- 搜索字符串作为 against() 的参数被给定。搜索以忽略字母大小写的方式执行。对于表中的每个记录行，MATCH() 返回一个相关性值。即，在搜索字符串与记录行在 MATCH() 列表中指定的列的文本之间的相似性尺度。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">EXPLAIN </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">SELECT</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">FROM</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> student </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">WHERE</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> MATCH</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(studentname) AGAINST(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">love</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">/*</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">开始之前，先说一下全文索引的版本、存储引擎、数据类型的支持情况</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">MySQL 5.6 以前的版本，只有 MyISAM 存储引擎支持全文索引；</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">MySQL 5.6 及以后的版本，MyISAM 和 InnoDB 存储引擎均支持全文索引;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">只有字段的数据类型为 char、varchar、text 及其系列才可以建全文索引。</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">测试或使用全文索引时，要先看一下自己的 MySQL 版本、存储引擎和数据类型是否支持全文索引。</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">*/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">create</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [unique|cluster] </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">index</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 索引名 </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">on</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 表名(列名[ASC|AESC])</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">create</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [单一索引|聚簇索引] </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">index</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 索引名 </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">on</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 表名(列名[升序|降序])</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="索引准则" tabindex="-1"><a class="header-anchor" href="#索引准则"><span>索引准则</span></a></h2><ul><li>索引不是越多越好</li><li>不要经常变动数据加索引</li><li>小数据量的表建议不加索引</li><li>索引一般应加在查找条件的字段</li></ul><h2 id="索引的数据结构" tabindex="-1"><a class="header-anchor" href="#索引的数据结构"><span>索引的数据结构</span></a></h2><p><strong>我们可以在创建上述索引的时候，为其指定索引类型，分两类</strong></p><ul><li>hash类型的索引：查询单条快，范围查询慢</li><li>b tree类型的索引：b+树，层数越多，数据量指数级增长（我们就用它，因为innodb默认支持它）</li></ul><p><strong>不同的存储引擎支持的索引类型也不一样</strong></p><ul><li>InnoDB 支持事务，支持行级别锁定，支持 B-tree、Full-text 等索引，不支持 Hash 索引；</li><li>MyISAM 不支持事务，支持表级别锁定，支持 B-tree、Full-text 等索引，不支持 Hash 索引；</li><li>Memory 不支持事务，支持表级别锁定，支持 B-tree、Hash 等索引，不支持 Full-text 索引；</li><li>NDB 支持事务，支持行级别锁定，支持 Hash 索引，不支持 B-tree、Full-text 等索引；</li><li>Archive 不支持事务，支持表级别锁定，不支持 B-tree、Hash、Full-text 等索引；</li></ul><h3 id="b-tree原理" tabindex="-1"><a class="header-anchor" href="#b-tree原理"><span>B+ Tree原理</span></a></h3><h4 id="数据结构" tabindex="-1"><a class="header-anchor" href="#数据结构"><span>数据结构</span></a></h4><p>B Tree指的是平衡树（Balance Tree），平衡树是一种查找树，并且所有的叶子节点位于同一层</p><p>B+ Tree 是B树一种变形，它是基于B Tree 和叶子节点顺序访问指针进行实现，通常用于数据库和操作系统的文件系统中。</p><p>B+树有两种类型的节点：内部节点（也称索引节点）和叶子节点，内部节点就是非叶子节点，内部节点不存储数据，只存储索引，数据都存在叶子节点中。</p><p>内部节点的key都是按照从小到大的顺序排列，对于内部节点中的一个key，左子树中的所有key都小于它，右子树中所有key都大于它，叶子节点中记录也是按照从小到大的顺序排列的。</p><p>每个叶子节点都存在相邻叶子节点的引用<img src="`+l+'" alt="image-20201014153254394" width="706" height="262"></p><h4 id="树的常见特性" tabindex="-1"><a class="header-anchor" href="#树的常见特性"><span>树的常见特性</span></a></h4><h5 id="avl-树" tabindex="-1"><a class="header-anchor" href="#avl-树"><span>AVL 树</span></a></h5><p>平衡二叉树，一般是用平衡因子差值决定并通过旋转来实现，左右子树树高差不超过1，那么和红黑树比较它是严格的平衡二叉树，平衡条件非常严格（树高差只有1），只要插入或删除不满足上面的条件就要通过旋转来保持平衡。由于旋转是非常耗费时间的。所以 AVL 树适用于插入/删除次数比较少，但查找多的场景。</p><h5 id="红黑树" tabindex="-1"><a class="header-anchor" href="#红黑树"><span>红黑树</span></a></h5><p>通过对从根节点到叶子节点路径上各个节点的颜色进行约束，确保没有一条路径会比其他路径长2倍，因而是近似平衡的。所以相对于严格要求平衡的AVL树来说，它的旋转保持平衡次数较少。适合，查找少，插入/删除次数多的场景。（现在部分场景使用跳表来替换红黑树，可搜索“为啥 redis 使用跳表(skiplist)而不是使用 red-black？”）</p><h5 id="b-b-树" tabindex="-1"><a class="header-anchor" href="#b-b-树"><span>B/B+树</span></a></h5><p>多路查找树，出度高，磁盘IO低，一般用于数据库系统中。</p><h5 id="b-树和红黑树的比较" tabindex="-1"><a class="header-anchor" href="#b-树和红黑树的比较"><span>B+树和红黑树的比较</span></a></h5><p>红黑树等平衡树可以用来实现索引，但是文件系统及数据库系统普遍采用B+ Tree作为索引结构，主要有以下两个原因：</p><ul><li><p>磁盘IO次数</p><p>B+树一个节点可以存储多个元素，相对于红黑树的树高更低，磁盘IO次数更少</p></li><li><p>磁盘预读特性</p><p>为了减少磁盘I/O操作，磁盘往往不是严格按需读取，而是每次都会预读。预读过程中，磁盘进行顺序读取，顺序读取不需要进行磁盘寻道。每次会读取页的整倍数。</p><p>操作系统一般将内存和磁盘分割成固定大小的块，每一块称为一页，内存与磁盘以页为单位交换数据。数据库系统将索引的一个节点的大小设置为页的大小，使得一次 I/O 就能完全载入一个节点。</p></li></ul><h5 id="b-树和b树的比较" tabindex="-1"><a class="header-anchor" href="#b-树和b树的比较"><span>B+树和B树的比较</span></a></h5><p>B + 树的磁盘IO更低</p><p>B+树的内部节点并没有指向关键字具体信息的指针。因此其内部节点相对B树更小。如果把所有同一内部节点的关键字存放在同一盘块中，那么盘块所能容纳的关键字数量也就越多。一次性读入内存中的需要查找的关键字也就越多。相对来说IO读写次数也就降低了。</p><p>B+树的查询效率更加稳定</p><p>由于非叶子结点并不是最终指向文件内容的结点，而只是叶子结点中关键字的索引。所以任何关键字的查找必须走一条从根结点到叶子结点的路。所有关键字查询的路径长度相同，导致每一个数据的查询效率相当。</p><p>B+树元素遍历效率高</p><p>B 树在提高了磁盘IO性能的同时并没有解决元素遍历的效率低下的问题。正是为了解决这个问题，B+树应运而生。B+树只要遍历叶子节点就可以实现整棵树的遍历。而且在数据库中基于范围的查询是非常频繁的，而 B 树不支持这样的操作（或者说效率太低）。</p><h1 id="创建索引的注意点" tabindex="-1"><a class="header-anchor" href="#创建索引的注意点"><span>创建索引的注意点</span></a></h1><ol><li><strong>创建索引</strong></li></ol><p>对于查询占主要的应用来说，索引显得尤为重要。很多时候性能问题很简单的就是因为我们忘了添加索引而造成的，或者说没有添加更为有效的索引导致。如果不加</p><p>索引的话，那么查找任何哪怕只是一条特定的数据都会进行一次全表扫描，如果一张表的数据量很大而符合条件的结果又很少，那么不加索引会引起致命的性能下降。 但是也不是什么情况都非得建索引不可，比如性别可能就只有两个值，建索引不仅没什么优势，还会影响到更新速度，这被称为过度索引。</p><ol start="2"><li><strong>复合索引</strong></li></ol><p>比如有一条语句是这样的：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">select</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> users </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">where</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> area</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">’beijing’ </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">and</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> age</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">22</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>​ 如果我们是在area和age上分别创建单个索引的话，由于mysql查询每次只能使用一个索引，所以虽然这样已经相对不做索引时全表扫描提高了很多效率，但是如果在area、age两列上创建复合索引的话将带来更高的效率。如果我们创建了(area, age,salary)的复合索引，那么其实相当于创建了(area,age,salary)、(area,age)、(area)三个索引，这被称为最佳左前缀特性。 ​ 因此我们在创建复合索引时应该将最常用作限制条件的列放在最左边，依次递减。<strong>(最左匹配原则)</strong></p><ol start="3"><li><strong>索引不会包含有NULL值的列</strong></li></ol><p>​ 只要列中包含有NULL值都将不会被包含在索引中，复合索引中只要有一列含有NULL值，那么这一列对于此复合索引就是无效的。所以我们在数据库设计时不要让字段的默认值为NULL。</p><ol start="4"><li><strong>使用短索引</strong></li></ol><p>​ 对串列进行索引，如果可能应该指定一个前缀长度。例如，如果有一个CHAR(255)的 列，如果在前10 个或20 个字符内，多数值是惟一的，那么就不要对整个列进行索引。短索引不仅可以提高查询速度而且可以节省磁盘空间和I/O操作。</p><ol start="5"><li><strong>排序的索引问题</strong></li></ol><p>​ mysql查询只使用一个索引，因此如果where子句中已经使用了索引的话，那么order by中的列是不会使用索引的。因此数据库默认排序可以符合要求的情况下不要使用排序操作；尽量不要包含多个列的排序，如果需要最好给这些列创建复合索引。</p><ol start="6"><li><strong>like语句操作</strong></li></ol><p>​ 一般情况下不鼓励使用like操作，如果非使用不可，如何使用也是一个问题。like “%aaa%” 不会使用索引而like “aaa%”可以使用索引。</p><ol start="7"><li><strong>不要在列上进行运算</strong></li></ol><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">select</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> users </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">where</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> YEAR</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(adddate);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="8"><li><strong>不使用NOT IN</strong></li></ol><p>​ NOT IN都不会使用索引将进行全表扫描。NOT IN可以NOT EXISTS代替</p><h1 id="对explain解读" tabindex="-1"><a class="header-anchor" href="#对explain解读"><span>对Explain解读</span></a></h1><p><strong>【示例】</strong></p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">EXPLAIN </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">SELECT</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> FROM</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> `</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">t8t_mid_uc</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">`</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">`</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">uc_knowledge_base_answer</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">`</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> WHERE</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> problem_id </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>【结果】</strong></p><p><img src="'+t+'" alt="clipboard" width="1141" height="88"><strong>【解读】</strong></p><p><strong>【id】</strong></p><p>​ id列的编号是 select 的序列号，有几个 select 就有几个id，并且id的顺序是按 select 出现的顺序增长的。 ​ id列越大执行优先级越高，id相同则从上往下执行，id为NULL最后执行。 <strong>【其他示例】</strong></p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">EXPLAIN </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">SELECT</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> FROM</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>\n<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">`</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">t8t_mid_uc</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">`</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">`</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">uc_knowledge_base_answer</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">`</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">WHERE</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> problem_id </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">IN</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">	SELECT</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> id </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">FROM</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> `</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">t8t_mid_uc</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">`</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">`</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">uc_knowledge_base_problem</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">`</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">	WHERE</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> problem </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">LIKE</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">%水电%</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>【结果】</strong></p><p><img src="'+h+`" alt="clipboard123" width="1397" height="62"><strong>【select_type】</strong></p><ul><li>simple：简单查询、查询不包括子查询和union</li><li>primary：复杂查询中的最外层select</li><li>subquery：包含在select中的子查询（不再from语句中）</li><li>derived：包含在from 子句中的子查询。MySQL会将结果存放在一个临时表中，也称之为派生表（dervied的中意）</li><li>union：在union 中的第二个和随后的select 补充union操作符 <strong>【union语法】</strong></li></ul><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">SELECT</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> column_name(s) </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">FROM</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> table_name1</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">UNION</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">SELECT</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> column_name(s) </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">FROM</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> table_name2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 默认union 操作符选取不同的值，如果允许相同的值，需要使用union all UNION 结果集中的列名总是等于 UNION 中第一个 SELECT 语句中的列名。</p><p><strong>【table】</strong></p><p>​ explain的一行正在访问哪个表 ​ 当from子句中有子查询时，table列是&lt;derivenN&gt;格式，表示当前查询依赖 id=N 的查询，于是先执行 id=N 的查询。 当有 union 时，UNION RESULT 的 table 列的值为&lt;union1,2&gt;，1和2表示参与 union 的 select 行id。 <strong>【type】</strong></p><p>​ 表示关联类型或访问类型，即mysql决定如何查找表中的数据，查找数据行记录的大概范围 ​ 最优到最差依次是：</p><div class="language-tex line-numbers-mode" data-highlighter="shiki" data-ext="tex" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">system &gt; const &gt; eq_ref &gt; ref &gt; range &gt; index_merge &gt; index &gt; ALL</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>​ 通常来说，得保证查询到range级别、最好达到ref</p><ul><li>null：mysql能够在优化阶段分解查询语句，在执行阶段用不着再访问表或索引。例如：在索引列中选取最小值，可以单独查找索引来完成，不需要在执行时访问表</li><li>const,system：mysql能对查询的某部分进行优化并将其转化成一个常量（可以看show warnings 的结果）。用于 primary key 或 unique key 的所有列与常数比较时，所以表最多有一个匹配行，读取1次，速度比较快。system是const的特例，表里只有一条元组匹配时为system</li><li>eq_ref：primary key 或 unique key 索引的所有部分被连接使用 ，最多只会返回一条符合条件的记录。这可能是在 const 之外最好的联接类型了，简单的 select 查询不会出现这种 type。</li><li>ref：相比 eq_ref，不使用唯一索引，而是使用普通索引或者唯一性索引的部分前缀，索引要和某个值相比较，可能会找到多个符合条件的行。</li></ul><ol><li>简单 select 查询，name是普通索引（非唯一索引）</li><li>关联表查询，idx_film_actor_id是film_id和actor_id的联合索引，这里使用到了film_actor的左边前缀film_id部分。 - range：范围扫描通常出现在 in(), between ,&gt; ,&lt;, &gt;= 等操作中。使用一个索引来检索给定范围的行。 - merge_index：表示查询使用了两个以上的索引，最后取交集或者并集，常见and ，or的条件使用了不同的索引 - index：扫描全表索引，这通常比ALL快一些。 - ALL：即全表扫描，意味着mysql需要从头到尾去查找所需要的行。通常情况下这需要增加索引来进行优化了</li></ol><p><strong>【possible_keys】</strong></p><p>​ 显示查询可能使用哪些索引来查找。 ​ explain 时可能出现 possible_keys 有列，而 key 显示 NULL 的情况，这种情况是因为表中 数据 不多，mysql认为索引对此查询帮助不大，选择了全表查询。 如果该列是NULL，则没有相关的索引。在这种情况下，可以通过检查 where 子句看是否可以创造一个适当的索引来提高查询性能，然后用 explain 查看效果。</p><p><strong>【key】</strong></p><p>​ 显示mysql实际采用哪个索引来优化对该表的访问。 如果没有使用索引，则该列是 NULL。如果想强制mysql使用或忽视possible_keys列中的索引，在查询中使用 force index、ignore index。</p><p><strong>【key_len】</strong></p><p>​ 显示了mysql在索引里使用的字节数，通过这个值可以算出具体使用了索引中的哪些列。 举例来说，film_actor的联合索引 idx_film_actor_id 由 film_id 和 actor_id 两个int列组成，并且每个int是4字节。通过结果中的key_len=4可推断出查询使用了第一个列：film_id列来执行索引查找。</p><p><strong>key_len计算规则如下：</strong></p><p>字符串</p><p>​ - char(n)：n字节长度 ​ - varchar(n)：2字节存储字符串长度，如果是utf-8，则长度 3n + 2</p><p>数值类型 - tinyint：1字节 - smallint：2字节 - int：4字节 - bigint：8字节</p><p>时间类型　 - date：3字节 - timestamp：4字节 - datetime：8字节</p><p>​ 如果字段允许为 NULL，需要1字节记录是否为 NULL ​ 索引最大长度是768字节，当字符串过长时，mysql会做一个类似左前缀索引的处理，将前半部分的字符提取出来做索引。</p><p><strong>【ref】</strong></p><p>​ 显示了在key列记录的索引中，表查找值所用到的列或常量，常见的有：const（常量），字段名（例：film.id）</p><p><strong>【rows】</strong> mysql估计要读取并检测的行数，注意这个不是结果集里的行数。</p><p><strong>【Extar】</strong></p><p>​ 展示的是额外信息。常见的重要值如下：</p><p>​ 1）Using index：使用覆盖索引</p><p>覆盖索引定义：mysql执行计划explain结果里的key有使用索引，如果select后面查询的字段都可以从这个索引的树中获取，这种情况一般可以说是用到了覆盖索引，extra里一般都有using index；覆盖索引一般针对的是辅助索引，整个查询结果只通过辅助索引就能拿到结果，不需要通过辅助索引树找到主键，再通过主键去主键索引树里获取其它字段值</p><p>​ 2）Using where：使用 where 语句来处理结果，并且查询的列未被索引覆盖，5.6.x之后支持ICP特性，可以把检查条件也下推到存储引擎层，不符合检查条件和限制条件的数据，直接不读取，extra列显示using index condition</p><p>​ 3）Using index condition：查询的列不完全被索引覆盖，where条件中是一个前导列的范围查询；（所谓前导列，就是在创建复合索引语句的第一列或者连续的多列。比如通过：CREATE INDEX film ON table1(x, y, z)创建索引，那么x，xy，xyz都是前导列，而yz，y，z这样的就不是）</p><p>​ 4）Using temporary：mysql需要创建一张临时表来处理查询。出现这种情况一般是要进行优化的，首先是想到用索引来优化。</p><p>​ 1. actor.name没有索引，此时创建了张临时表来distinct ​ 2. film.name建立了idx_name索引，此时查询时extra是using index,没有用临时表 ​ 5）Using filesort：将用外部排序而不是索引排序，数据较小时从内存排序，否则需要在磁盘完成排序。这种情况下一般也是要考虑使用索引来优化的。</p><p>​ 1. actor.name未创建索引，会浏览actor整个表，保存排序关键字name和对应的id，然后排序name并检索行记录 ​ 2. film.name建立了idx_name索引,此时查询时extra是using index</p><p>​ 6）Select tables optimized away：使用某些聚合函数（比如 max、min）来访问存在索引的某个字段时</p>`,131)]))}const g=i(p,[["render",k]]),c=JSON.parse('{"path":"/db/mysql-index/","title":"索引","lang":"zh-CN","frontmatter":{"title":"索引","createTime":"2025/07/04 18:06:02","permalink":"/db/mysql-index/","tag":["MYSQL","数据库"],"description":"索引是在存储引擎层实现的，而不是在服务器上实现的，所以不同的存储引擎具有不用的索引类型和实现。 索引的作用 提高索引速度 确保数据的一致性 可以加速表和表之间的连接、实现表与表之间的参照完整性 使用分组和排序字句进行数据检索时，可以显著减少分组和排序的时间 分类 B+树索引 它是mysql大多存储引擎的默认索引类型。 因为不再需要进行全局扫描，只需要对...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"索引\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-06T15:23:13.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://tesiwoo.top/db/mysql-index/"}],["meta",{"property":"og:title","content":"索引"}],["meta",{"property":"og:description","content":"索引是在存储引擎层实现的，而不是在服务器上实现的，所以不同的存储引擎具有不用的索引类型和实现。 索引的作用 提高索引速度 确保数据的一致性 可以加速表和表之间的连接、实现表与表之间的参照完整性 使用分组和排序字句进行数据检索时，可以显著减少分组和排序的时间 分类 B+树索引 它是mysql大多存储引擎的默认索引类型。 因为不再需要进行全局扫描，只需要对..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-06T15:23:13.000Z"}],["meta",{"property":"article:tag","content":"数据库"}],["meta",{"property":"article:tag","content":"MYSQL"}],["meta",{"property":"article:modified_time","content":"2025-07-06T15:23:13.000Z"}]]},"readingTime":{"minutes":18.66,"words":5598},"git":{"createdTime":1751623883000,"updatedTime":1751815393000,"contributors":[{"name":"yuxiang_chu","username":"","email":"yuxiang_chu@sui.com","commits":1,"avatar":"https://gravatar.com/avatar/4ac399a125e46d0ec8629ca6750dfd462f6865f74d1d4865199efd5f4640012f?d=retro"},{"name":"TeSiWoo","username":"TeSiWoo","email":"1666016977@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/TeSiWoo?v=4","url":"https://github.com/TeSiWoo"}]},"autoDesc":true,"filePathRelative":"notes/数据库/mysql/mysql-index.md","headers":[]}');export{g as comp,c as data};
