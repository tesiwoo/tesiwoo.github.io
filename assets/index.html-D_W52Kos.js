import{_ as a,c as t,b as e,a as n,d as i,w as p,r,o as m,e as o}from"./app-DScUAMv8.js";const c={},d={class:"table-of-contents"};function y(u,l){const s=r("router-link");return m(),t("div",null,[e("nav",d,[e("ul",null,[e("li",null,[i(s,{to:"#mysql与oracle的区别"},{default:p(()=>l[0]||(l[0]=[o("mysql与oracle的区别")])),_:1,__:[0]})]),e("li",null,[i(s,{to:"#innodb"},{default:p(()=>l[1]||(l[1]=[o("Innodb")])),_:1,__:[1]})]),e("li",null,[i(s,{to:"#myisam"},{default:p(()=>l[2]||(l[2]=[o("MyIsAM")])),_:1,__:[2]})])])]),l[3]||(l[3]=n('<h2 id="mysql与oracle的区别" tabindex="-1"><a class="header-anchor" href="#mysql与oracle的区别"><span>mysql与oracle的区别</span></a></h2><p><strong>相同点：</strong></p><ul><li>都是关系型数据库</li><li>都是比较流行的数据库</li></ul><p><strong>不同点：</strong></p><ul><li><p>并发性：并发性是oltp数据库最重要的特性，但并发涉及到资源的获取、共享与锁定。</p><p>​ myslq主要以表级锁为主，对资源锁定的粒度很大、如果一个session对一个表加锁时间过长、会让其他session无法更此表的数据。</p><p>​ 虽然INNODB引擎可以用行级锁，但是这个锁的机制依赖于表的索引、如果表没有索引、或者sql语句没有使用索引、那么仍然使用表级锁</p><p>​ oracle使用的是行级锁，对资源锁定的粒度很小，只是锁定sqk需要的资源，并且加锁实在数据库行上、不依赖于索引。索引<strong>oracle对并发性的支持要好很多。</strong></p></li><li><p>一致性：oracle支持serializable的隔离级别，可以实现最高级别的读一致性，并且oracle是 read commit（读已提交）的隔离级别，每个session提交后其他session才可以看到提交的更改。oracle通过在undo表空间中构造多板块数据块来实现读一致性，每个session查询时，如果对应的数据块发生变化，oracle会在undo表空间中为这个session构造它查询时的旧的数据块。</p><p>mysql没有类似oracle构造的构造多版本数据块的机制，只支持repeatable read（可重复读）的隔离级别。一个session读取数据时，其他session不能更改数据，但可以在表的最后面插入数据。并且session更新数据时，要加上排它锁，其他session无法访问数据。</p></li><li><p>事务</p><p>oracle很早就支持事务，而mysql在innodb存储引擎的行级锁的情况下才支持事务。</p></li><li><p>数据持久性</p><p>oracle保证提交的数据均可恢复，因为oracle把提交的sql操作线写入了在线联机日志文件中，保存到了磁盘上，但是如果出现数据库或主机异常重启，重启的oracle可以靠联机在线日志恢复客户提交的数据。</p><p>mysql默认提交slq语句，但如果更新过程中出现db或主机重启问题，也许会丢失数据</p></li><li><p>事务的提交方式</p><p>mysql是默认自动提交，而oracle默认不自动提交， 需要用户手动提交，需要在sql末尾写commit指令或者在可视化软件中点击commit按钮</p></li><li><p>逻辑备份</p><p>oracle逻辑备份时不锁定数据，且备份的数据是一致的</p><p>mysql逻辑备份是要锁定数据，才能保证备份的数据是一致的，影响业务正常的dml使用</p></li><li><p>热备份</p><p>oracle有成熟的热备工具rman，热备时，不影响用户使用数据库。既是备份的数据库不一致，也可以在恢复时通过归档日志和联机重做日志进行一致的回复</p><p>mysql的myisax的引擎，用mysql自带的mysqlhostcopy热备时，需要给表加读锁，影响dml操作。</p><p>innodb的引擎，它会备份innodb的表和索引，但是不会备份.frm文件。用ibbackup备份时，会有一个日志文件记录备份期间的数据变化。因此可以不用锁表，不影响其他用户使用数据库，但此工具是收费的。</p><p>innobackup是结合ibbackup使用的一个脚本，他会协助对.frm文件的备份。</p></li><li><p>sql语句的扩展和灵活性</p><p>mysql对sql语句有很多非常实用且方便的扩展，比如limit功能，insert可以一次插入多行数据，select某些管理数据可以不加form</p><p>oracle在这方面更加稳重</p></li><li><p>复制</p><p>oracle：既有推或拉式的传统数据复制，也有dataguard的双机或多机容灾机制，主库出现问题是，可以自动切换备库到主库，但配置管理较复杂。 mysql：复制服务器配置简单，但主库出问题时，丛库有可能丢失一定的数据。且需要手工切换丛库到主库。</p></li><li><p>性能诊断</p><p>oracle有各种成熟的性能诊断调优工具，能实现很多自动分析、诊断功能。比如awr、addm、sqltrace、tkproof等 mysql的诊断调优方法较少，主要有慢查询日志。</p></li><li><p>权限与安全</p><p>mysql的用户与主机有关，感觉没有什么意义，另外更容易被仿冒主机及ip有可乘之机。 oracle的权限与安全概念比较传统，中规中矩。</p></li><li><p>分区表和分区索引</p><p>oracle的分区表和分区索引功能很成熟，可以提高用户访问db的体验。 mysql的分区表还不太成熟稳定。</p></li><li><p>管理工具</p><p>oracle有多种成熟的命令行、图形界面、web管理工具，还有很多第三方的管理工具，管理极其方便高效。 mysql管理工具较少，在linux下的管理工具的安装有时要安装额外的包（phpmyadmin， etc)，有一定复杂性。</p></li></ul><h1 id="innodb和myisam区别" tabindex="-1"><a class="header-anchor" href="#innodb和myisam区别"><span>InnoDB和MyIsAM区别</span></a></h1><p>InnoDB是mysql默认使用的数据库引擎（5.5之后）</p><ul><li>事务：MyISAM不支持事务，INNODB支持事务。</li><li>数据行锁定：MyISAM不支持行级锁、它是表级锁，INNODB支持行级锁。</li><li>外键约束：MyISAM不支持外键约束、INNODB支持外键约束。</li><li>在线热备份：MyISAm不支持在线热备份，INNODB支持在线热备份</li><li>全文索引：MyISAM支持全文索引（<strong>mysql在5.6.4版本中也开始支持全文索引</strong>）、INNODB不支持全文索引。</li><li>表空间的大小：myisam表空间较小，innodb的表空间约为Myisam的两倍 <ul><li>MYISAM：节约空间，速度较快</li><li>INNODB：安全性高、事务的处理、支持索引（多表多用户的操作）</li></ul></li></ul><blockquote><p>在物理空间存在的位置</p><p>所有的数据库文件都存在data目录下，一个文件夹对应一个数据库</p><p>本质还是文件的存储。</p><p>mysql引擎在物理文件上的区别：</p><ul><li>InnoDB在数据库表中只有一个*.rfm，以及上级目录下的ibdata1文件</li><li>Myisam对应文件 <ul><li>*.frm---表结构的定义文件</li><li>*.MYD----数据文件</li><li>*.MYI------索引文件</li></ul></li></ul></blockquote><h2 id="innodb" tabindex="-1"><a class="header-anchor" href="#innodb"><span>Innodb</span></a></h2><p>INNODB是mysql默认的事务型存储引擎，只要在需要它不支持的特性时，才考虑使用其他存储引擎</p><p>INNODB采用MVCC来支持高并发，并且实现了四个标准隔离级别（未提交读、读已提交、可重复读、可串行化）。其默认的隔离级别是可重复读，在可重复度的级别下，通过MVCC+Next-Key Locking防止幻读</p><p>主索引是聚簇索引时，在索引中保存了数据，从而避免直接读取磁盘，因此对主键查询有很高的性能。</p><p>INNODB内部做了很多优化，包括从磁盘读取数据时采用可预测读，能够自动在内存中出那个键hash索引以加速读操作的自适应哈希索引，以及能够加速插入操作的插入缓存区的。</p><p>InnoDB支持真正的在线热备份，Mysql其他的存储引擎不支持在线热备份，要获取一次性视图需要停止对所有表的写入，而在读写混合的场景中，停止写入可能意味着听读取。</p><h2 id="myisam" tabindex="-1"><a class="header-anchor" href="#myisam"><span>MyIsAM</span></a></h2><p>设计简单，数据以紧密格式存储。对于只读数据，或者表比较小、可以容忍修复操作，则依然可以使用它。</p><p>提供了大量的特性，包括压缩表、空间数据索引等。</p><p>不支持事务。</p><p>不支持行级锁，只能对整张表加锁，读取时会对需要读到的所有表加共享锁，写入时则对表加排它锁。但在表有读取操作的同时，也可以往表中插入新的记录，这被称为并发插入（CONCURRENT INSERT）。</p><p>可以手工或者自动执行检查和修复操作，但是和事务恢复以及崩溃恢复不同，可能导致一些数据丢失，而且修复操作是非常慢的。</p><p>如果指定了 DELAY_KEY_WRITE 选项，在每次修改执行完成时，不会立即将修改的索引数据写入磁盘，而是会写到内存中的键缓冲区，只有在清理键缓冲区或者关闭表的时候才会将对应的索引块写入磁盘。这种方式可以极大的提升写入性能，但是在数据库或者主机崩溃时会造成索引损坏，需要执行修复操作。</p>',22))])}const N=a(c,[["render",y]]),b=JSON.parse('{"path":"/db/pycclp6t/","title":"storage-ngine","lang":"zh-CN","frontmatter":{"title":"storage-ngine","createTime":"2025/07/04 18:06:02","permalink":"/db/pycclp6t/","description":"mysql与oracle的区别 相同点： 都是关系型数据库 都是比较流行的数据库 不同点： 并发性：并发性是oltp数据库最重要的特性，但并发涉及到资源的获取、共享与锁定。 ​ myslq主要以表级锁为主，对资源锁定的粒度很大、如果一个session对一个表加锁时间过长、会让其他session无法更此表的数据。 ​ 虽然INNODB引擎可以用行级锁，但...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"storage-ngine\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-04T10:11:23.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://tesiwoo.top/db/pycclp6t/"}],["meta",{"property":"og:title","content":"storage-ngine"}],["meta",{"property":"og:description","content":"mysql与oracle的区别 相同点： 都是关系型数据库 都是比较流行的数据库 不同点： 并发性：并发性是oltp数据库最重要的特性，但并发涉及到资源的获取、共享与锁定。 ​ myslq主要以表级锁为主，对资源锁定的粒度很大、如果一个session对一个表加锁时间过长、会让其他session无法更此表的数据。 ​ 虽然INNODB引擎可以用行级锁，但..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-04T10:11:23.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-04T10:11:23.000Z"}]]},"readingTime":{"minutes":7.3,"words":2191},"git":{"createdTime":1751623883000,"updatedTime":1751623883000,"contributors":[{"name":"yuxiang_chu","username":"","email":"yuxiang_chu@sui.com","commits":1,"avatar":"https://gravatar.com/avatar/4ac399a125e46d0ec8629ca6750dfd462f6865f74d1d4865199efd5f4640012f?d=retro"}]},"autoDesc":true,"filePathRelative":"notes/数据库/mysql/storage-ngine.md","headers":[]}');export{N as comp,b as data};
