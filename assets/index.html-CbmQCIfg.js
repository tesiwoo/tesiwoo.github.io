import{_ as o,c as e,a,o as p}from"./app-DScUAMv8.js";const r="/assets/image-20200807213945061-C_oNAtib.png",n={};function i(l,t){return p(),e("div",null,t[0]||(t[0]=[a('<blockquote><p>Mimor GC：young区的GC，新生代</p><p>Major GC：old区的GC，老年代</p><p>Full GC：old区+young区：新生代和老年代</p></blockquote><h2 id="判断一个对象是否是垃圾" tabindex="-1"><a class="header-anchor" href="#判断一个对象是否是垃圾"><span>判断一个对象是否是垃圾</span></a></h2><ul><li><p><strong>引用计数法</strong></p><p>对于某个对象而言，只要应用程序中持有该对象的引用，就说明该对象不是垃圾，如果一个对象没有任 何指针对其引用，它就是垃圾。 **弊端 😗*如果AB相互持有引用，导致永远不能被回收。（A引用B，B引用A，而没有其他任何对象引用A或B）</p></li><li><p><strong>可达性分析</strong></p><p>通过GC Root的对象，开始向下寻找，看某个对象是否可达</p><p><img src="'+r+'" alt="image-20200807213945061" width="1159" height="656"></p></li></ul><blockquote><p>能作为GC Root:类加载器、Thread、虚拟机栈的本地变量表、static成员、常量引用、本地方法栈的变量等</p><p>（就是能作为上帝视角的对象）</p><p>虚拟机栈（栈帧中的本地变量表）中引用的对象。 方法区中类静态属性引用的对象。 方法区中常量引用的对象。 本地方法栈中JNI（即一般说的Native方法）引用的对象。</p></blockquote><h2 id="什么时候回收垃圾" tabindex="-1"><a class="header-anchor" href="#什么时候回收垃圾"><span>什么时候回收垃圾？</span></a></h2><p>GC是由JVM自动完成的，根据JVM系统环境而定，所以时机是不确定的。 当然，我们可以手动进行垃圾回收，比如调用System.gc()方法通知JVM进行一次垃圾回收，但是具体什么时刻运行也无法控制。也就是说System.gc()只是通知要回收，什么时候回收由JVM决定。但是不建议手动调用该方法，因为GC消耗的资源比较大。</p><blockquote><p>手动调用System.gc();</p><p>老年代空间不够用了</p><p>新生代空间不够用了</p><p>方法区空间不不够用了</p></blockquote><h2 id="垃圾回收算法" tabindex="-1"><a class="header-anchor" href="#垃圾回收算法"><span>垃圾回收算法</span></a></h2><h3 id="标记-清除算法-最简单却最浪费时间-cms用" tabindex="-1"><a class="header-anchor" href="#标记-清除算法-最简单却最浪费时间-cms用"><span>标记-清除算法（最简单却最浪费时间）CMS用</span></a></h3><ul><li>标记：找出内存中需要清除的对象，并进行标记</li></ul><blockquote><p>此时堆中所有的对象都会扫描一次，从而确定需要清除的对象，比较耗时</p></blockquote><ul><li>清除：清除掉需要回收对象，释放出对应的空间</li></ul><blockquote><p>又要扫描一次</p></blockquote><p><strong>缺点：</strong></p><ol><li>标记和清除两个过程都比较耗时，效率不高</li><li>会产生大量不连续的内存碎片，空间碎片太多可能会导致以后在程序运行过程中需要分配较大对象时，无 法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。</li></ol><h3 id="标记-复制算法-浪费一半内存-增加效率-新生代常用" tabindex="-1"><a class="header-anchor" href="#标记-复制算法-浪费一半内存-增加效率-新生代常用"><span>标记-复制算法：（浪费一半内存，增加效率）新生代常用</span></a></h3><p>将内存平分为两块空间，标记和上面一样，然后复制为标记对象至留白的空间（连续的存储），然后把原空间的所有对象一次全部清除</p><p><strong>缺点：</strong></p><ol><li>空间利用率低</li></ol><h3 id="标记-整理算法-实现很复杂-老年代常用" tabindex="-1"><a class="header-anchor" href="#标记-整理算法-实现很复杂-老年代常用"><span>标记-整理算法：（实现很复杂）老年代常用</span></a></h3><blockquote><p>复制收集算法在对象存活率较高时就要进行较多的复制操作，效率将会变低。更关键的是，<strong>如果 不想浪费50%的空间，就需要有额外的空间进行分配担保，以应对被使用的内存中所有对象都有 100%存活的极端情况，所以老年代一般不能直接选用这种算法。</strong></p></blockquote><p>标记过程仍然与&quot;标记-清除&quot;算法一样，但是后续步骤不是直接对可回收对象进行清理，而是让所有存活 的对象都向一端移动，然后直接清理掉端边界以外的内存。</p><blockquote><p>其实上述过程相对&quot;复制算法&quot;来讲，少了一个&quot;保留区&quot;</p></blockquote><p><strong>ps：（不同区对垃圾回收算法的选择）</strong></p><ul><li>Young区：复制算法(对象在被分配之后，可能生命周期比较短，Young区复制效率比较高</li><li>Old区：标记清除或标记整理(Old区对象存活时间比较长，复制来复制去没必要，不如做个标记再清理)</li></ul>',25)]))}const c=o(n,[["render",i]]),u=JSON.parse('{"path":"/JAVA/y2cwsr7n/","title":"垃圾回收算法","lang":"zh-CN","frontmatter":{"title":"垃圾回收算法","createTime":"2025/07/05 11:50:33","permalink":"/JAVA/y2cwsr7n/","description":"Mimor GC：young区的GC，新生代 Major GC：old区的GC，老年代 Full GC：old区+young区：新生代和老年代 判断一个对象是否是垃圾 引用计数法 对于某个对象而言，只要应用程序中持有该对象的引用，就说明该对象不是垃圾，如果一个对象没有任 何指针对其引用，它就是垃圾。 **弊端 😗*如果AB相互持有引用，导致永远不能被...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"垃圾回收算法\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-06T15:23:13.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://tesiwoo.top/JAVA/y2cwsr7n/"}],["meta",{"property":"og:title","content":"垃圾回收算法"}],["meta",{"property":"og:description","content":"Mimor GC：young区的GC，新生代 Major GC：old区的GC，老年代 Full GC：old区+young区：新生代和老年代 判断一个对象是否是垃圾 引用计数法 对于某个对象而言，只要应用程序中持有该对象的引用，就说明该对象不是垃圾，如果一个对象没有任 何指针对其引用，它就是垃圾。 **弊端 😗*如果AB相互持有引用，导致永远不能被..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-06T15:23:13.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-06T15:23:13.000Z"}]]},"readingTime":{"minutes":3.44,"words":1032},"git":{"createdTime":1751815393000,"updatedTime":1751815393000,"contributors":[{"name":"TeSiWoo","username":"TeSiWoo","email":"1666016977@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/TeSiWoo?v=4","url":"https://github.com/TeSiWoo"}]},"autoDesc":true,"filePathRelative":"notes/JAVA/JVM/垃圾回收算法.md","headers":[]}');export{c as comp,u as data};
